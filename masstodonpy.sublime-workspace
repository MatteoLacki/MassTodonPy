{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"numpy",
				"numpy_weighted_median"
			],
			[
				"inten",
				"intensity_g"
			],
			[
				"diff_model",
				"diff_model_kwds"
			],
			[
				"diff",
				"diff_model_args"
			],
			[
				"fish",
				"fishy_clusters"
			],
			[
				"mz_",
				"mz_fishy"
			],
			[
				"mz_diff",
				"mz_diff_model"
			],
			[
				"denoi",
				"denoiser_args"
			],
			[
				"percentil",
				"x_percentiles"
			],
			[
				"clus",
				"cluster_diffs"
			],
			[
				"all",
				"all_diffs"
			],
			[
				"mz",
				"mz_lefts"
			],
			[
				"colors",
				"colors_no"
			],
			[
				"bito",
				"bitonic_clustering"
			],
			[
				"abs",
				"abs_perc_dev"
			],
			[
				"good",
				"good_c"
			],
			[
				"intensit",
				"intensity_test"
			],
			[
				"bitno",
				"bitonic_clustering"
			],
			[
				"intenis",
				"intensity_test"
			],
			[
				"prev",
				"prev_color"
			],
			[
				"bit",
				"bitonic_clustering"
			],
			[
				"cluster",
				"clusters"
			],
			[
				"runs",
				"runs_no"
			],
			[
				"coe",
				"coefficients\tfunction"
			],
			[
				"per",
				"percentiles_of_N_integers\tfunction"
			],
			[
				"medi",
				"rt_median_distance"
			],
			[
				"anno",
				"annotated\tstatement"
			],
			[
				"o",
				"ordered_str"
			],
			[
				"min",
				"min_rt\tstatement"
			],
			[
				"unlabelled",
				"unlabelled_slim\tstatement"
			],
			[
				"annot",
				"annotated_stats\tstatement"
			],
			[
				"asa",
				"asarray\tfunction"
			],
			[
				"ann",
				"annotated_slim\tstatement"
			],
			[
				"rt",
				"rt_median_distance"
			],
			[
				"as",
				"asarray\tfunction"
			],
			[
				"pat",
				"patsy\tmodule"
			],
			[
				"mod",
				"model_name\tstatement"
			],
			[
				"Nto",
				"NotImplementedError\tclass"
			],
			[
				"scan",
				"scannumber"
			],
			[
				"sca",
				"scannumber"
			],
			[
				"nu",
				"numSlice2"
			],
			[
				"num",
				"numSlice"
			],
			[
				"mul",
				"multiprocessing\tmodule"
			],
			[
				"D",
				"D_stats"
			],
			[
				"kd",
				"kd_tree_nice\tmodule"
			],
			[
				"bo",
				"boxes_sizes\tstatement"
			],
			[
				"box",
				"box_tenants\tstatement"
			],
			[
				"idx",
				"idx2"
			],
			[
				"rt_l",
				"rt_aligned_min"
			]
		]
	},
	"buffers":
	[
		{
			"file": "MassTodonPy/plotters/spectrum.py",
			"settings":
			{
				"buffer_size": 1222,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from scipy.stats import norm\n\n\n# generate in-silico data\nmean = 0.0\nstd  = 1.0\nN    = 10000\nX    = np.random.normal(mean, std, N)\n\ndensity, bin_edges = np.histogram(X, density=True)\nL_distr = np.diff(bin_edges) * density.cumsum()\nR_distr = np.flip(np.diff(bin_edges), 0) * np.flip(density, 0).cumsum()\n\n# I cannot use quantile of 1: it's infinity.\n# nor can I use quantiles of 0: it's minus infinity\nL_distr = L_distr[1:]\nR_distr = R_distr[1:]\nG = norm(loc=0, scale=1)\n# I need corresponding quantile\n\n\nz0 = bin_edges[1:-1]\nz1 = np.flip(bin_edges, 0)[1:-1]\n\nu0 = G.ppf(L_distr)\nu1 = G.isf(R_distr)\n\nu = np.concatenate((u0, u1))\nz = np.concatenate((z0, z1))\n\nu_sq  = sum(u**2)\nu_sum = sum(u)\nN     = len(L_distr) + len(R_distr)\nz_sum = sum(z)\nu_z   = sum(u * z)\ndet   = N * u_sq - u_sum**2\n\nmean_lsq_estim = ( u_sq  * z_sum - u_sum * u_z) / det\nsd_lsq_estim   = (-u_sum * z_sum + N     * u_z) / det\n# this seriously sucks....\n\n\n\n# check that the estimate of sigma ain't negative!!!\n\n\n\n\n\ndef least_squares_estimate():\n\n\n\n# naive numpy weighted median\n\n\n\ndef numpy_weighted_median(data, weights=None):\n    \"\"\"Calculate the weighted median of an array/list using numpy.\"\"\"\n    import numpy as np\n    if weights is None:\n        return np.median(np.array(data).flatten())\n    data, weights = np.array(data).flatten(), np.array(weights).flatten()\n    if any(weights > 0):\n        sorted_data, sorted_weights = map(np.array, zip(*sorted(zip(data, weights))))\n        midpoint = 0.5 * sum(sorted_weights)\n        if any(weights > midpoint):\n            return (data[weights == np.max(weights)])[0]\n        cumulative_weight = np.cumsum(sorted_weights)\n        below_midpoint_index = np.where(cumulative_weight <= midpoint)[0][-1]\n        if cumulative_weight[below_midpoint_index] - midpoint < sys.float_info.epsilon:\n            return np.mean(sorted_data[below_midpoint_index:below_midpoint_index+2])\n    return sorted_data[below_midpoint_index+1]\n\n\n\n\n\n# implement the median estimation and standard deviation based on medi\n\n# implement the estimation of the standard deviations.\n\n\n\n# Wait, we don't want to use it directly.\n# We might use it to spot too small and too big deviations, though.\n# So we might invest more time to have something truly better.\n# Like a spline.\n# The small diffs are particularly troublesome.\n\n# What we need to do really now, is to estimate the \n# standard deviations: the hereroscedasticity of the trend.\n# Implement the estimator of the normal parameters based on \n# the historgram.\n\n# Then, simply use it for passing to a function that will\n# spread the IsoSpec infinitely-resolved peaks over the bins.\n\n# Implement a binning based on one spectrum first.\n# Then, think how to aggregate spectra.\n# But this has to be done based on some similarity across runs.\n# So it's more complicated: leave it for now.\n\n# Instead, simply make a binning defined over what?\n# The question is: should we have bins as large as\n# the base peak groups, or smaller?\n# If we assume, that more than one thing can explain them,\n# then better smaller?\n# It's a problem of continuous VS discrete.\n",
			"file": "Development/Orbitrap/futile_attemp_with_quantile_estimator.py",
			"file_size": 3097,
			"file_write_time": 131771092900674401,
			"settings":
			{
				"buffer_size": 3097,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "%load_ext autoreload\n%autoreload 2\n%load_ext line_profiler\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom MassTodonPy.plotters.spectrum              import plot_spectrum\nfrom MassTodonPy.readers.from_npy               import spectrum_from_npy\nfrom MassTodonPy.Spectra.peak_clustering        import mz_bitonic\nfrom MassTodonPy.Spectra.peak_clustering        import iter_cluster_ends\nfrom MassTodonPy.Spectra.orbitrap_peak_groups   import bitonic_clustering\nfrom MassTodonPy.models.polynomial              import polynomial\n\n\ndata_path     = '/Users/matteo/Projects/review_masstodon/data/PXD001845/numpy_files/20141202_AMB_pBora_PLK_10x_40MeOH_1FA_OT_120k_10uscans_928_ETciD_8ms_15SA_19precZ/1'\nmz, intensity = spectrum_from_npy(data_path)\nbc            = bitonic_clustering(mz,\n                                   intensity, \n                                   min_mz_diff   = .15,\n                                   abs_perc_dev = .2)\n\n\n# bc.plot_mz_diffs()\n# bc.fit_mz_diffs(model = polynomial)\n# bc.plot_mz_diffs()\n\n# # the fishy m/z values are here.\n# fishy_mz = bc.mz_diff_model.x[ ~bc.mz_diff_model.is_signal ]\n# fishy_clusters = np.unique(bc.clusters[np.isin(bc.mz, fishy_mz)])\n# fc = fishy_clusters[3]\n\n# def plot_fishy(fc):\n#     mz_fishy        = mz[bc.clusters == fc]\n#     intensity_fishy = intensity[bc.clusters == fc]\n\n#     plt.vlines(mz_fishy, [0], intensity_fishy, colors='white')\n#     plt.show()\n\n# plot_fishy(fishy_clusters[7])\n# # ergo: not all fishy clusters are so fishy. Leave it for now.\n\n\n### The estimation of the Gaussian parameters.\n# INPUT:    binned histogram data\n# OUTPUT:   estimated mean and standard deviation of the normal distribution\n\n\n\n# this does not work at all: all the intensities are almost the same...\ngroups = list(bc.iter_clusters())\nmz_g, intensity_g = groups[1500]\n# plot_spectrum(mz_g, intensity_g)\n\n# mz_g_diff = np.diff(mz_g)\n# ends      = np.zeros(dtype = mz_g.dtype, shape = mz_g.shape)\n# ends[1:]  = mz_g[:-1] - mz_g_diff/2.0\n# ends[0]   = mz_g[0]   - mz_g_diff[0]/2.0\n# xy        = [(e, 0) for e in ends]\n# lengths   = np.zeros(dtype = mz_g.dtype, shape = mz_g.shape)\n# lengths[0:-1] = mz_g_diff/2.0\n# lengths[1:]   += mz_g_diff/2.0\n# lengths[0]    += mz_g_diff[0]/2.0\n# lengths[-1]    += mz_g_diff[-1]/2.0\n\n# for XY, L, I in zip(xy, lengths, intensity_g):\n#     plt.Rectangle(XY, L, I)\n# plt.bar(ends, intensity_g, lengths, align='edge')\n# plt.scatter(mz_g, intensity_g)\n# plt.show()\n\n\ndef max_intensity_mean_estimator(mz_g, intensity_g):\n    \"\"\"An idiotically simple estimator: the mass of the most intense peak.\"\"\"\n    return mz_g[np.argmax(intensity_g)]\n\ndef simple_mean_estimator(mz_g, intensity_g):\n    return np.dot(mz_g, intensity_g)/sum(intensity_g)\n\ndef simple_sd_estimator(mz_g, intensity_g):\n    mean_e = simple_mean_estimator(mz_g, intensity_g)\n    return sqrt( np.dot(  ) )\n\nnp.array([1,23,4])**2\n\n# estimate standard deviation:\nfrom math import sqrt\nfrom scipy.stats import norm\n \nmean_e = simple_mean_estimator(mz_g, intensity_g)\nmz_c   = mz_g - mean_e\nprobs  = intensity_g/sum(intensity_g)\nsd     = sqrt( np.dot( np.power(mz_c, 2), probs ))\n\nG = norm(loc = mean_e, scale = sd)\nx = np.linspace(mean_e - 3*sd, mean_e + 3*sd, 100)\nplt.plot(x, G.pdf(x))\nplt.scatter(mz_g, intensity_g/ sum(intensity_g) / np.diff(mz_g)[1] )\n# plot_spectrum(centered_mz, intensity_g, show=False)\nplt.show()\n\n\n\n# fuck these stupid methods. Simplicity !!!!\n",
			"file": "Development/Orbitrap/preprocessing.py",
			"file_size": 3313,
			"file_write_time": 131775418260092674,
			"settings":
			{
				"buffer_size": 3415,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "In [1]: np.array([1,23,4])**2                               \n------------------------------------------------------------\nNameError                  Traceback (most recent call last)\n<ipython-input-1-a905b9b5c641> in <module>()                \n----> 1 np.array([1,23,4])**2                               \n                                                            \nNameError: name 'np' is not defined                         \n                                                            \nIn [2]:                                                     \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n                                                            \n",
			"settings":
			{
				"buffer_size": 3294,
				"line_ending": "Unix",
				"name": "Terminal (bash)",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Golang Build/Go.sublime-build",
					""
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Run"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Test"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Install"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Cross-Compile (Interactive)"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Golang Build/Go.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"term",
				"Terminal View: Open Bash Terminal"
			],
			[
				"termin",
				"Terminal View: Open Bash Terminal"
			],
			[
				"send",
				"SendCode: Choose Program"
			],
			[
				"termi",
				"Terminal View: Open Bash Terminal"
			],
			[
				"sen",
				"SendCode: Choose Program"
			],
			[
				"colo",
				"UI: Select Color Scheme"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"terminal",
				"Terminal View: Open Bash Terminal"
			],
			[
				"teemin",
				"Terminal View: Open Bash Terminal"
			],
			[
				"ter",
				"Preferences: Terminal View: Settings"
			],
			[
				"send ",
				"SendCode: Choose Program"
			],
			[
				"ay",
				"ayu: Activate theme"
			],
			[
				"box",
				"Boxy Theme: Preferences"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"colorco",
				"Tweak Colorcode to current color scheme"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Color Scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"send code",
				"SendCode: Choose Program"
			],
			[
				"instla",
				"Package Control: Install Package"
			],
			[
				"colors",
				"UI: Select Color Scheme"
			],
			[
				"her",
				"Hermes: List Kernels"
			],
			[
				"herm",
				"Hermes: Connect Kernel"
			],
			[
				"them",
				"UI: Select Color Scheme"
			],
			[
				"antia",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 136.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": true,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/matteo/Projects/MassTodonPy",
		"/Users/matteo/Projects/MassTodonPy/Development",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra"
	],
	"file_history":
	[
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/polynomial.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/spline.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap_peak_groups.py",
		"/Users/matteo/Poligon/R/StatisticalUncertainties/R/histogram_gauss_estimation.R",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/futile_attemp_with_quantile_estimator.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/stats/descriptive.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/model.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/two_dimensional.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/denoiser.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/stats/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters/spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/peak_clustering.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/arrays/operations.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/readers/from_npy.py",
		"/Users/matteo/Projects/MassTodonPy/bin/plot_mass_spectrum",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/matplotlib_colors.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/dummy.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/bitonic_clustering.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/from_npy.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Read.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/readers/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Orbitrap.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Arrays/operations.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Arrays/__init__.py",
		"/Users/matteo/Desktop/Stat/more_of_density_and_quantile_regression.py",
		"/Users/matteo/Projects/rta/rta/development_script.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/iterator_class_method.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/docs/Makefile",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/preprocessing.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Reporter/Reporter.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/DeconvolutionProblem.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/MassTodon.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/Deconvolve.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/IsotopeDistribution.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Measure/Measure.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/bokeh_spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/TODO.md",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/sorting.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Spectrum/Spectrum.py",
		"/Users/matteo/Projects/rta/rta/preprocessing.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/filters.py",
		"/Users/matteo/Projects/rta/rta/models/GMM_OLS_combo.py",
		"/Users/matteo/Projects/rta/rta/x_validation_potential.py",
		"/Users/matteo/Projects/rta/rta/models/GMLSQSpline.py",
		"/Users/matteo/Projects/rta/rta/models/SQSpline.py",
		"/Users/matteo/Projects/rta/TODO.md",
		"/Users/matteo/Projects/rta/rta/models/devel/gmm_ols.py",
		"/Users/matteo/Projects/rta/rta/models/plot.py",
		"/Users/matteo/Projects/rta/rta/models/RapidGMLSQSpline.py",
		"/Users/matteo/Projects/rta/rta/alignment/run_alignment.py",
		"/Users/matteo/Projects/rta/rta/models/base_model.py",
		"/Users/matteo/Projects/rta/rta/array_operations/misc.py",
		"/Users/matteo/Projects/rta/rta/junk/patsy_bs.py",
		"/Users/matteo/Projects/rta/rta/models/spline_regression.py",
		"/Users/matteo/Projects/rta/rta/misc.py",
		"/Users/matteo/Projects/rta/rta/splines/denoising.py",
		"/Users/matteo/Projects/rta/rta/models/least_squares_splines.py",
		"/Users/matteo/Projects/rta/rta/patsy_operations/parsers.py",
		"/Users/matteo/Projects/rta/rta/models/test_statistics/rt_residuals_distro.py",
		"/Users/matteo/Projects/rta/rta/models/sklearn_regressors.py",
		"/Users/matteo/Projects/rta/rta/array_operations/__init__.py",
		"/Users/matteo/Projects/rta/rta/patsy_operations/__init__.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/__init__.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/grouped_k_folds.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/pept_ids_representation_in_runs.py",
		"/Users/matteo/Projects/rta/rta/splines/denoising2.py",
		"/Users/matteo/Projects/rta/rta/read_in_data.py",
		"/Users/matteo/Projects/rta/rta/getting_to_grips_with_pandas.py",
		"/Users/matteo/Projects/rta/rta/profiling_denoise_and_align.py",
		"/Users/matteo/Projects/rta/rta/splines/denoising_procedure.py",
		"/Users/matteo/Projects/rta/rta/tweaking_preprocessing.py",
		"/Users/matteo/Downloads/multiprocessing_test.py",
		"/Users/matteo/Projects/rta/rta/scripts/xvalidationq.py",
		"/Users/matteo/Projects/rta/rta/models/quantile.py",
		"/Users/matteo/Projects/rta/rta/models/__init__.py",
		"/Users/matteo/Projects/rta/rta/models/huber.py",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/PXD001845/20141202_AMB_Bora_10x_40MeOH_1FA_OT_120k_10uscans_728_ETD_4ms_24precZ.raw",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/uniprot-organism%3A1241935.fasta",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/tabula-IH532330.csv",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/taxonomy-islandicus+LAL14%2F1.tab",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/raw2np.go",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/scans_cnt.go",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/20140909_F_EV_Sisl-prep2-SAX-fr6_r120_r240-ETD5SA20_1.mgf",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/analysis/getting_spectra.py",
		"/Users/matteo/Poligon/Go/hello_world_2.go",
		"/Users/matteo/Poligon/Go/hello_world_0.go",
		"/Users/matteo/Poligon/Go/hello_world_1.go",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/analysis/reading_files/read_spectrum.go",
		"/Users/matteo/Library/Application Support/Sublime Text 3/Packages/User/golang.sublime-settings",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/Search summary top-down SAX all lines.txt",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/analysis/PXD003074_header.py",
		"/Users/matteo/Downloads/Finnigan-0.0206/README",
		"/Users/matteo/Projects/rta/rta/kd_tree/kd_tree_nice.py",
		"/Users/matteo/Projects/rta/rta/scripts/find_neighbour_graph.py",
		"/Users/matteo/Projects/rta/rta/dbscan/dbscan_all_boxes.py",
		"/Users/matteo/Projects/rta/rta/dbscan/dbscan_percentile_boxes.py",
		"/Users/matteo/Projects/rta/rta/kd_tree/developing_kd_trees.py",
		"/Users/matteo/.config/zathura/zathurarc",
		"/opt/X11/include/X11/extensions/xtrapdi.h"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sys",
			"Projects",
			"())",
			"class",
			"self._mzdiff_model",
			"_mzdiff",
			"fit_mz_diffs",
			"print",
			"dedup",
			"iter_cluster_ends",
			"mz_and_mz_diffs",
			"()",
			"plot_spe",
			"np.",
			"bitonic_clustering",
			"cluste",
			"sorted",
			"mz_local",
			"            \n",
			"list",
			"spectrum",
			"min_intensity",
			"percent_top_peaks",
			"print",
			"spectrum",
			"kwds",
			"_devel",
			"print",
			"graph",
			" =",
			"sort",
			"sort_by_first",
			"sort",
			"_peakGroups_bricks_clusters",
			"self.M"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"self.mz_diff_model",
			"bitonic_iterator",
			"deconvolution_graph"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "MassTodonPy/plotters/spectrum.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1222,
						"regions":
						{
						},
						"selection":
						[
							[
								1028,
								1028
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Development/Orbitrap/futile_attemp_with_quantile_estimator.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3097,
						"regions":
						{
						},
						"selection":
						[
							[
								598,
								598
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Development/Orbitrap/preprocessing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3415,
						"regions":
						{
						},
						"selection":
						[
							[
								2855,
								2855
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 825.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3294,
						"regions":
						{
							"0,0":
							{
								"flags": 272,
								"regions":
								[
									[
										0,
										4
									]
								],
								"scope": "terminalview.black_green"
							},
							"0,18":
							{
								"flags": 272,
								"regions":
								[
									[
										18,
										19
									]
								],
								"scope": "terminalview.black_green"
							},
							"0,20":
							{
								"flags": 272,
								"regions":
								[
									[
										20,
										22
									]
								],
								"scope": "terminalview.black_green"
							},
							"0,23":
							{
								"flags": 272,
								"regions":
								[
									[
										23,
										24
									]
								],
								"scope": "terminalview.black_green"
							},
							"0,28":
							{
								"flags": 272,
								"regions":
								[
									[
										28,
										29
									]
								],
								"scope": "terminalview.black_green"
							},
							"0,5":
							{
								"flags": 272,
								"regions":
								[
									[
										5,
										8
									]
								],
								"scope": "terminalview.black_green"
							},
							"1,0":
							{
								"flags": 272,
								"regions":
								[
									[
										61,
										121
									]
								],
								"scope": "terminalview.black_red"
							},
							"2,0":
							{
								"flags": 272,
								"regions":
								[
									[
										122,
										131
									]
								],
								"scope": "terminalview.black_red"
							},
							"3,0":
							{
								"flags": 272,
								"regions":
								[
									[
										183,
										213
									]
								],
								"scope": "terminalview.black_green"
							},
							"3,34":
							{
								"flags": 272,
								"regions":
								[
									[
										217,
										225
									]
								],
								"scope": "terminalview.black_cyan"
							},
							"3,42":
							{
								"flags": 272,
								"regions":
								[
									[
										225,
										227
									]
								],
								"scope": "terminalview.black_blue"
							},
							"4,0":
							{
								"flags": 272,
								"regions":
								[
									[
										244,
										251
									]
								],
								"scope": "terminalview.black_green"
							},
							"4,10":
							{
								"flags": 272,
								"regions":
								[
									[
										254,
										255
									]
								],
								"scope": "terminalview.black_blue"
							},
							"4,16":
							{
								"flags": 272,
								"regions":
								[
									[
										260,
										262
									]
								],
								"scope": "terminalview.black_blue"
							},
							"4,18":
							{
								"flags": 272,
								"regions":
								[
									[
										262,
										263
									]
								],
								"scope": "terminalview.black_cyan"
							},
							"4,19":
							{
								"flags": 272,
								"regions":
								[
									[
										263,
										264
									]
								],
								"scope": "terminalview.black_blue"
							},
							"4,20":
							{
								"flags": 272,
								"regions":
								[
									[
										264,
										266
									]
								],
								"scope": "terminalview.black_cyan"
							},
							"4,22":
							{
								"flags": 272,
								"regions":
								[
									[
										266,
										267
									]
								],
								"scope": "terminalview.black_blue"
							},
							"4,23":
							{
								"flags": 272,
								"regions":
								[
									[
										267,
										268
									]
								],
								"scope": "terminalview.black_cyan"
							},
							"4,24":
							{
								"flags": 272,
								"regions":
								[
									[
										268,
										272
									]
								],
								"scope": "terminalview.black_blue"
							},
							"4,28":
							{
								"flags": 272,
								"regions":
								[
									[
										272,
										273
									]
								],
								"scope": "terminalview.black_cyan"
							},
							"4,7":
							{
								"flags": 272,
								"regions":
								[
									[
										251,
										252
									]
								],
								"scope": "terminalview.black_red"
							},
							"6,0":
							{
								"flags": 272,
								"regions":
								[
									[
										366,
										375
									]
								],
								"scope": "terminalview.black_red"
							},
							"8,0":
							{
								"flags": 272,
								"regions":
								[
									[
										488,
										492
									]
								],
								"scope": "terminalview.black_green"
							},
							"8,5":
							{
								"flags": 272,
								"regions":
								[
									[
										493,
										496
									]
								],
								"scope": "terminalview.black_green"
							}
						},
						"selection":
						[
							[
								496,
								496
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_complete_commit_on_tab": false,
							"caret_style": "blink",
							"color_scheme": "Packages/TerminalView/TerminalView.hidden-tmTheme",
							"draw_centered": false,
							"draw_indent_guides": false,
							"draw_white_space": "none",
							"gutter": false,
							"highlight_line": false,
							"scroll_past_end": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"terminal_view": true,
							"terminal_view_activate_args":
							{
								"cmd": "/bin/bash -l",
								"cwd": "/Users/matteo/Projects/MassTodonPy",
								"keep_open": false,
								"syntax": null,
								"title": "Terminal (bash)"
							},
							"terminal_view_last_cursor_pos":
							[
								8,
								8
							],
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 54.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.33,
			0.66,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.golang_build":
	{
		"height": 225.0
	},
	"output.gotools_syntax_errors":
	{
		"height": 127.0
	},
	"pinned_build_system": "",
	"project": "masstodonpy.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"spline",
				"MassTodonPy/models/spline.py"
			],
			[
				"splin",
				"MassTodonPy/models/spline.py"
			],
			[
				"descr",
				"MassTodonPy/stats/descriptive.py"
			],
			[
				"Model",
				"MassTodonPy/models/model.py"
			],
			[
				"stats",
				"MassTodonPy/stats/descriptive.py"
			],
			[
				"desc",
				"MassTodonPy/stats/descriptive.py"
			],
			[
				"two",
				"MassTodonPy/models/two_dimensional.py"
			],
			[
				"model",
				"MassTodonPy/models/model.py"
			],
			[
				"mode",
				"MassTodonPy/models/model.py"
			],
			[
				"spect",
				"MassTodonPy/plotters/spectrum.py"
			],
			[
				"spec",
				"MassTodonPy/plotters/spectrum.py"
			],
			[
				"plot",
				"bin/plot_mass_spectrum"
			],
			[
				"dummp",
				"MassTodonPy/Data/dummy.py"
			],
			[
				"dumm",
				"MassTodonPy/Data/dummy.py"
			],
			[
				"biton",
				"MassTodonPy/Spectra/bitonic_clustering.py"
			],
			[
				"dec",
				"MassTodonPy/Deconvolution/DeconvolutionProblem.py"
			],
			[
				"Spect",
				"MassTodonPy/Spectra/Spectrum.py"
			],
			[
				"decon",
				"MassTodonPy/Deconvolution/Deconvolve.py"
			],
			[
				"TODO",
				"TODO.md"
			],
			[
				"MEa",
				"MassTodonPy/Measure/Measure.py"
			],
			[
				"Spe",
				"Development/Spectrum/Spectrum.py"
			],
			[
				"Mass",
				"MassTodonPy/MassTodon.py"
			],
			[
				"file",
				"rta/xvalidation/filters.py"
			],
			[
				"prep",
				"rta/preprocessing.py"
			],
			[
				"fil",
				"rta/xvalidation/filters.py"
			],
			[
				"pre",
				"rta/preprocessing.py"
			],
			[
				"preop",
				"rta/preprocessing.py"
			],
			[
				"SQL",
				"rta/models/SQSpline.py"
			],
			[
				"comb",
				"rta/models/GMM_OLS_combo.py"
			],
			[
				"junk",
				"rta/junk/patsy_bs.py"
			],
			[
				"bas",
				"rta/models/base_model.py"
			],
			[
				"GLM",
				"rta/models/GMM_OLS_combo.py"
			],
			[
				"misc",
				"rta/array_operations/misc.py"
			],
			[
				"array_oper",
				"rta/array_operations/misc.py"
			],
			[
				"base",
				"rta/models/base_model.py"
			],
			[
				"Spine",
				"rta/models/spline_regression.py"
			],
			[
				"plo",
				"rta/models/plot.py"
			],
			[
				"pars",
				"rta/patsy_operations/parsers.py"
			],
			[
				"deni",
				"rta/splines/denoising.py"
			],
			[
				"deno",
				"rta/splines/denoising.py"
			],
			[
				"SKL",
				"rta/models/sklearn_regressors.py"
			],
			[
				"skle",
				"rta/models/sklearn_regressors.py"
			],
			[
				"poten",
				"rta/x_validation_potential.py"
			],
			[
				"pandas",
				"rta/getting_to_grips_with_pandas.py"
			],
			[
				"twa",
				"rta/tweaking_preprocessing.py"
			],
			[
				"denoi",
				"rta/splines/denoising.py"
			],
			[
				"quant",
				"rta/models/quantile.py"
			],
			[
				"hub",
				"rta/models/huber.py"
			],
			[
				"kd",
				"rta/kd_tree/kd_tree_nice.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 224.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
