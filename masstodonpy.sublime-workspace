{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"DEcon",
				"DeconvolutionProblem"
			],
			[
				"plt",
				"plt_style"
			],
			[
				"mol",
				"mol_columns"
			],
			[
				"divid",
				"divide_iter"
			],
			[
				"peka",
				"peak_groups"
			],
			[
				"peak",
				"peak_groups"
			],
			[
				"good",
				"good_mols"
			],
			[
				"Imper",
				"ImperatorMagnus"
			],
			[
				"impor",
				"imperator"
			],
			[
				"peak_g",
				"peak_groups_cnt"
			],
			[
				"impera",
				"impera_iter"
			],
			[
				"edge",
				"edges_cnt"
			],
			[
				"isotop",
				"isotopic_coverage"
			],
			[
				"pe",
				"peak_groups"
			],
			[
				"con",
				"connected_component_subgraphs"
			],
			[
				"istop",
				"isotopic_coverage"
			],
			[
				"inte",
				"intensity"
			],
			[
				"edg",
				"edge_info"
			],
			[
				"add",
				"add_edges_from"
			],
			[
				"E",
				"E_intensity"
			],
			[
				"prob",
				"prob_I"
			],
			[
				"iso",
				"isotopologues"
			],
			[
				"isoot",
				"isotopologues"
			],
			[
				"loac",
				"local_intensity"
			],
			[
				"total",
				"total_intensities"
			],
			[
				"tio",
				"total_intensities"
			],
			[
				"lcoal",
				"local_intensity"
			],
			[
				"sub",
				"subset"
			],
			[
				"local",
				"local_mz"
			],
			[
				"mz_diff",
				"fit_mz_diff_model"
			],
			[
				"goo",
				"good_mols"
			],
			[
				"subs",
				"subspectra"
			],
			[
				"all_",
				"all_indices"
			],
			[
				"is_mol",
				"is_mols_2"
			],
			[
				"max",
				"max_mz"
			],
			[
				"intev",
				"interval"
			],
			[
				"subspec",
				"subspectra"
			],
			[
				"itne",
				"interval"
			],
			[
				"Mas",
				"MassTodonPy"
			],
			[
				"isotopo",
				"isotopologues"
			],
			[
				"isot",
				"isotopologues"
			],
			[
				"clsuter",
				"clusters"
			],
			[
				"subsp",
				"subspectra"
			],
			[
				"bitonic",
				"bitonic_clustering"
			],
			[
				"bitoni",
				"bitonic_clustering"
			],
			[
				"mz",
				"mz_l"
			],
			[
				"Iso",
				"IsotopeCalculator"
			],
			[
				"getCon",
				"getConfsRaw"
			],
			[
				"from",
				"frombuffer"
			],
			[
				"env",
				"envelope"
			],
			[
				"spect",
				"spectrum_from_npy"
			],
			[
				"get",
				"get_isotopic_probabilities"
			],
			[
				"itn",
				"intensity"
			],
			[
				"plot",
				"plot_spectrum"
			],
			[
				"mean",
				"mean_mz"
			],
			[
				"simple",
				"simple_sd_estimator"
			],
			[
				"numpy",
				"numpy_weighted_median"
			],
			[
				"inten",
				"intensity_g"
			],
			[
				"diff_model",
				"diff_model_kwds"
			],
			[
				"diff",
				"diff_model_args"
			],
			[
				"fish",
				"fishy_clusters"
			],
			[
				"mz_",
				"mz_fishy"
			],
			[
				"denoi",
				"denoiser_args"
			],
			[
				"percentil",
				"x_percentiles"
			],
			[
				"clus",
				"cluster_diffs"
			],
			[
				"all",
				"all_diffs"
			],
			[
				"colors",
				"colors_no"
			],
			[
				"bito",
				"bitonic_clustering"
			],
			[
				"abs",
				"abs_perc_dev"
			],
			[
				"intensit",
				"intensity_test"
			],
			[
				"bitno",
				"bitonic_clustering"
			],
			[
				"intenis",
				"intensity_test"
			],
			[
				"prev",
				"prev_color"
			],
			[
				"bit",
				"bitonic_clustering"
			],
			[
				"cluster",
				"clusters"
			],
			[
				"runs",
				"runs_no"
			],
			[
				"coe",
				"coefficients\tfunction"
			],
			[
				"per",
				"percentiles_of_N_integers\tfunction"
			],
			[
				"medi",
				"rt_median_distance"
			],
			[
				"anno",
				"annotated\tstatement"
			],
			[
				"o",
				"ordered_str"
			],
			[
				"min",
				"min_rt\tstatement"
			],
			[
				"unlabelled",
				"unlabelled_slim\tstatement"
			],
			[
				"annot",
				"annotated_stats\tstatement"
			],
			[
				"asa",
				"asarray\tfunction"
			],
			[
				"ann",
				"annotated_slim\tstatement"
			],
			[
				"rt",
				"rt_median_distance"
			],
			[
				"as",
				"asarray\tfunction"
			],
			[
				"pat",
				"patsy\tmodule"
			],
			[
				"mod",
				"model_name\tstatement"
			],
			[
				"Nto",
				"NotImplementedError\tclass"
			],
			[
				"scan",
				"scannumber"
			],
			[
				"sca",
				"scannumber"
			],
			[
				"nu",
				"numSlice2"
			],
			[
				"num",
				"numSlice"
			],
			[
				"mul",
				"multiprocessing\tmodule"
			],
			[
				"D",
				"D_stats"
			],
			[
				"kd",
				"kd_tree_nice\tmodule"
			],
			[
				"bo",
				"boxes_sizes\tstatement"
			],
			[
				"box",
				"box_tenants\tstatement"
			],
			[
				"idx",
				"idx2"
			],
			[
				"rt_l",
				"rt_aligned_min"
			]
		]
	},
	"buffers":
	[
		{
			"file": "MassTodonPy/Deconvolution/simple.py",
			"settings":
			{
				"buffer_size": 2430,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MassTodonPy/Spectra/simple.py",
			"settings":
			{
				"buffer_size": 13399,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "%load_ext autoreload\n%autoreload 2\n%load_ext line_profiler\n\nfrom collections            import  defaultdict, namedtuple, Counter\nimport numpy                as      np\nimport networkx             as      nx\nimport matplotlib.pyplot    as      plt\nfrom   time                 import  tipme\nimport pandas               as      pd\nfrom   math                 import  log10, floor\n\nfrom MassTodonPy.readers.from_npy               import spectrum_from_npy\nfrom MassTodonPy.Precursor.simple               import precursor\nfrom MassTodonPy.IsotopeCalculator.simple       import isotope_calculator\nfrom MassTodonPy.Spectra.orbitrap.peak_groups   import bitonic_clustering\nfrom MassTodonPy.Spectra.simple                 import spectrum\nfrom MassTodonPy.Molecule.simple                import molecule\nfrom MassTodonPy.Formula.Formula                import formula\nfrom MassTodonPy.Molecule.simple                import Molecule\nfrom MassTodonPy.stats.simple_normal_estimators import mean, sd\nfrom MassTodonPy.Data.Constants                 import infinity\nfrom MassTodonPy.models.polynomial              import polynomial\nfrom MassTodonPy.Spectra.lightweight            import lightweight_spectrum\nfrom MassTodonPy.Deconvolution.divide_ed_impera import divide_ed_impera, Imperator, ImperatorMagnus\nfrom MassTodonPy.preprocessing.filters          import filter_subspectra_molecules\nfrom MassTodonPy.Deconvolution.simple           import DeconvolutionProblem\nfrom MassTodonPy.plotters.graphs                import plot_numbered_graph\nfrom MassTodonPy.plotters.spectrum              import plot_spectrum\n\n# generating subspectra\ndata_path     = '/Users/matteo/Projects/review_masstodon/data/PXD001845/numpy_files/20141202_AMB_pBora_PLK_10x_40MeOH_1FA_OT_120k_10uscans_928_ETciD_8ms_15SA_19precZ/1'\nmz, intensity = spectrum_from_npy(data_path)\n\nspec = spectrum(mz, intensity)\nspec.bitonic_clustering()\nspec.fit_mz_diff_model()\nspec.min_mz_diff_clustering()\n\nspec.plot(clusters='bc')\n# TODO: replace this later on: a more complex model has to be fitted.\n# and the estimation of the Standard Deviations of groups has to be \n# dependent upon more data points all across the spectrum.\nspec.fit_sd_mz_model()\n\nsubspectra = list(spec.iter_mdc_subspectra())\nmz_digits  = spec.get_mz_digits()\niso_calc   = isotope_calculator(digits = mz_digits)\n\n# generating formulas\nfasta  = \"GAASMMGDVKESKMQITPETPGRIPVLNPFESPSDYSNLHEQTLASPSVFKSTKLPTPGKFRWSIDQLAVINPVEIDPEDIHRQALYLSHSRIDKDVEDKRQKAIEEFFTKDVIVPSPWTDHEGKQLSQCHSSKCTNINSDSPVGKKLTIHSEKSD\"\ncharge = 24\nprec   = precursor(fasta, charge, name=\"\", iso_calc=iso_calc)\nmols   = np.array(list(prec.molecules()))\nmin_prob = .8\nisotopic_coverage = .999\n\ngood_mols, good_subspectra = filter_subspectra_molecules(subspectra,\n                                                         mols,\n                                                         std_cnt = 3)\n# attention: the sd's will surely change!!! Good! :) Will they? They are not so important.\n# The bloody interval widths fully replace this concept.\n# to delete\nbc = np.array(list(spec.iter_bc_clusters()))\nmin_mz, max_mz, mean_mz, sds, skewnesses, counts, total_intensities, mz_spreads = spec.get_bc_stats()\nok = min_mz < max_mz\nmin_mz, max_mz, mean_mz, sds, skewnesses, counts, total_intensities, mz_spreads, bc =\\\n    [x[ok] for x in (min_mz, max_mz, mean_mz, sds, skewnesses, counts, total_intensities, mz_spreads, bc)]\n\npeak_groups = lightweight_spectrum(min_mz, max_mz, total_intensities) # efficient data structure\nt0 = time()\nimperator = divide_ed_impera(good_mols, peak_groups, min_prob, isotopic_coverage)\nimperator.impera()\nfit_time = time() - t0\n\n\n\n# imperator.plot()\n# imperator.plot_ccs()\n\nccs    = np.array(imperator.ccs) \nsimple = False\ncc     = ccs[100] if simple else ccs[np.argmax([len(c) for c in ccs])]\n\n\n\n\n\n\n\nfrom networkx.linalg.attrmatrix import attr_matrix\n# plt_style = 'default'\n# plt.style.use(plt_style)\n\n# there is no clear solution to the problem of what should go where.\n\n# this should be given the spectrum, IMHO.\ndeconvolution_problem\n\n# what if spec contained all these things?\nspec[10:400]\n\ndps = []\nfor cc in ccs:\n    dp = DeconvolutionProblem()\n    dp.fit(cc, total_intensities, min_mz, max_mz, mean_mz)\n    # dp.plot()\n    dps.append(dp)\n\ndps = np.array(dps)\ndps[10].plot()\n\n\nfit_to_zeros = False\n\nmz_all   = []\npred_all = []\nmz_widths= []\nmz_means_all = []\nY_all = []\nfor cc in ccs:\n    mol_columns = np.array([N < 0  for N in cc])\n    peak_rows   = np.array([N >= 0 for N in cc])\n    X, ordering = attr_matrix(cc, edge_attr='prob')\n    X = X[:,mol_columns][peak_rows,:]\n    ordering = np.array(ordering)\n    peaks    = ordering[ordering >= 0]\n    Y = total_intensities[peaks]\n    if fit_to_zeros:\n        Y = np.concatenate((Y, np.zeros(X.shape[1])))\n        x = 1.0 - np.array(X.sum(axis=0)).flatten()\n        X = np.concatenate((X,\n                            np.diag(x)))\n    mz_s = min_mz[peaks]\n    mz_e = max_mz[peaks]\n    mz_means_all.extend(mean_mz[peaks])\n    model = nnls(X, Y)\n    beta  = model.coef() \n    pred_all.extend(np.array(np.dot(X[:len(mz_s),], beta)).flatten())\n    mz_width = mz_e - mz_s\n    mz_widths.extend(mz_e - mz_s)\n    mz_all.extend(mz_s)\n    Y_all.extend(Y[Y>0])\n\nimport matplotlib\n# matplotlib.rcParams['figure.figsize'] = 400, 12\nplt.bar(mz_all, pred_all, mz_widths,\n        align='edge',\n        alpha= .5,\n        color='grey')\nplt.scatter(mz_means_all, Y_all, c= 'red', s=8)\nspec.plot(plt_style=plt_style, show=False, peak_color='black')\n# plt.savefig('/Users/matteo/Desktop/test.pdf')\nplt.show()\n\n# try also not to fit to zero intensities.\n# rationale: we alreday filter out some things.\n# assume that missigngess is irrelevant now.\n\nbetas = []\nfor cc in ccs:\n    Y, X, mz_s, mz_e = get_matrix_representation(cc, total_intensities)\n    betas.append(nnls(X, Y))\n# this code taks 63.9 ms to solve :D Fuck CVXOPT.\n\n\n\n\n\n",
			"file": "Development/Orbitrap/graphs_and_screening.py",
			"file_size": 5838,
			"file_write_time": 131793372351654902,
			"settings":
			{
				"buffer_size": 5865,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 276 files for \"import\"\n\n/Users/matteo/Projects/MassTodonPy/Makefile:\n  152  \n  153  # -----------------------------------------------------------\n  154: # -----  EVERYTHING BELOW THIS LINE IS NOT IMPORTANT --------\n  155  # -----       (Makefile helpers and decoration)      --------\n  156  # -----------------------------------------------------------\n\n/Users/matteo/Projects/MassTodonPy/README.md:\n  117  ### Python Scripting\n  118  \n  119: The simplest way to use the MassTodon in your Python script is to import the **MassTodon** function from the MassTodonPy module. \n  120  A simple script used to run the previous example peptide, would look like this:\n  121  \n  122  ```python\n  123: from MassTodonPy import MassTodon\n  124  \n  125  res = MassTodonize( fasta           = AAAGGGVVAGV,\n  ...\n  137  \n  138  ```python\n  139: from MassTodonPy.Plot import bokeh_spectrum\n  140: from MassTodonPy.Plot import bokeh_aggregated_precursors\n  141: from MassTodonPy.Plot import bokeh_aggregated_fragments\n  142: from MassTodonPy.Plot import bokeh_estimated_aggregated_fragments\n  143  \n  144  bokeh_spectrum(res)\n\n/Users/matteo/Projects/MassTodonPy/setup.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from setuptools import setup, find_packages\n   20  \n   21  setup(\n\n/Users/matteo/Projects/MassTodonPy/TODO.md:\n    1  ### MassTodon todo list\n    2  \n    3: # important\n    4  + divide the project into smaller modules:\n    5      + masstodon_bokeh\n\n/Users/matteo/Projects/MassTodonPy/bin/json2masstodon:\n   18  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   19  \n   20: import argparse\n   21  \n   22: from MassTodonPy.MassTodon import MassTodon\n   23: from MassTodonPy.CLI.AdditionalParsers import add_max_times_parsing\n   24: from MassTodonPy.CLI.AdditionalParsers import add_output_parsing\n   25: from MassTodonPy.CLI.AdditionalParsers import add_spectra_plots_parsing\n   26: from MassTodonPy.CLI.AdditionalParsers import add_verbosity_parsing\n   27: from MassTodonPy.CLI.MassTodon_wrapper import run_masstodon\n   28: from MassTodonPy.CLI.JsonParser import parse_json\n   29  \n   30  # Parsing call\n\n/Users/matteo/Projects/MassTodonPy/bin/masstodon:\n   66  # ................................................................................\n   67  \n   68: import argparse\n   69: from collections import defaultdict\n   70: import json\n   71: import os\n   72: from pprint import pprint\n   73: import re\n   74  \n   75: from MassTodonPy.CLI.AdditionalParsers import add_max_times_parsing\n   76: from MassTodonPy.CLI.AdditionalParsers import add_output_parsing\n   77: from MassTodonPy.CLI.AdditionalParsers import add_spectra_plots_parsing\n   78: from MassTodonPy.CLI.AdditionalParsers import add_verbosity_parsing\n   79: from MassTodonPy.CLI.MassTodon_wrapper import run_masstodon\n   80: from MassTodonPy.Data.Constants import eps\n   81: from MassTodonPy.MassTodon import MassTodon\n   82: from MassTodonPy.Parsers.blocked_fragments import parse_blocked_fragments\n   83: from MassTodonPy.Parsers.Paths import parse_path\n   84  \n   85  \n\n/Users/matteo/Projects/MassTodonPy/bin/masstodon_example_call:\n    1  #!/usr/bin/env python\n    2: from collections import defaultdict\n    3: import os\n    4  \n    5: from MassTodonPy.Data.get_dataset import get_dataset\n    6: from MassTodonPy.MassTodon import MassTodon\n    7: from MassTodonPy.Misc.cvxopt_wrapper import cvxopt_wrapper\n    8: from MassTodonPy.Plot import bokeh_spectrum\n    9: from MassTodonPy.Plot import bokeh_aggregated_precursors\n   10: from MassTodonPy.Plot import bokeh_aggregated_fragments\n   11: from MassTodonPy.Plot import bokeh_estimated_aggregated_fragments\n   12  \n   13  if __name__ == '__main__':\n\n/Users/matteo/Projects/MassTodonPy/bin/plot_mass_spectrum:\n    1  #!/usr/bin/env python2\n    2: import argparse\n    3: from pprint import pprint\n    4: import os\n    5  \n    6: from MassTodonPy.Spectra.Spectrum import Spectrum\n    7  \n    8  parser = argparse.ArgumentParser()\n\n/Users/matteo/Projects/MassTodonPy/Development/aggregation.py:\n    1: from math import fsum\n    2: import numpy as np\n    3: from six.moves import zip\n    4  \n    5  \n\n/Users/matteo/Projects/MassTodonPy/Development/check_no_of_fragments.py:\n    1: from MassTodonPy.Precursor.Precursor import Precursor\n    2  \n    3  substanceP_fasta = 'RPKPQQFFGLM'\n\n/Users/matteo/Projects/MassTodonPy/Development/fiddle.py:\n    2  %autoreload 2\n    3  \n    4: import numpy as np\n    5: from collections import defaultdict\n    6: from MassTodonPy.MoleculeMaker.MoleculeMaker import get_molecules\n    7: from MassTodonPy.Data.get_data import get_dataset, get_amino_acids\n    8: from MassTodonPy.IsotopeCalculator.isotopeCalculator import IsotopeCalculator\n    9: from MassTodonPy.Parsers.formula_parser import parse_formula\n   10: from MassTodonPy.Data.get_data import get_isotopic_masses_and_probabilities\n   11: from MassTodonPy.Spectra.operations import cdata2numpyarray,\\\n   12                                             aggregate_envelopes\n   13  \n   14: from IsoSpecPy import IsoSpecPy\n   15  \n   16  mol = get_dataset(\"substanceP\")\n   ..\n   71      lists[mass].append(prob)\n   72  \n   73: from math import fsum\n   74  newMasses = np.array([k for k in lists])\n   75  newProbs = np.empty(len(newMasses))\n\n/Users/matteo/Projects/MassTodonPy/Development/Frederik_spectrum.py:\n    1: from pandas import DataFrame as df\n    2: from MassTodonPy.Data.get_dataset import get_dataset\n    3  \n    4  mol = get_dataset(\"substanceP\")\n\n/Users/matteo/Projects/MassTodonPy/Development/MassTodon.py:\n    3  \n    4  \n    5: from collections import defaultdict\n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.MassTodon import MassTodon\n    8: from MassTodonPy.Parsers.Paths import parse_path\n    9  \n   10  substanceP = get_dataset('substanceP')\n   ..\n   24                        _verbose=False)\n   25  \n   26: from MassTodonPy.Plot import bokeh_spectrum\n   27: from MassTodonPy.Plot import bokeh_aggregated_precursors\n   28: from MassTodonPy.Plot import bokeh_aggregated_fragments\n   29: from MassTodonPy.Plot import bokeh_estimated_aggregated_fragments\n   30  \n   31  bokeh_spectrum(masstodon, show=True)\n\n/Users/matteo/Projects/MassTodonPy/Development/MassTodon2.py:\n    1: from collections import defaultdict\n    2: from MassTodonPy.Data.get_dataset import get_dataset\n    3: from MassTodonPy.MassTodon import MassTodon\n    4: from MassTodonPy.Parsers.Paths import parse_path\n    5  \n    6  substanceP = get_dataset('substanceP')\n    .\n   22                        _verbose=False)\n   23  \n   24: from MassTodonPy.Plot import bokeh_spectrum\n   25: from MassTodonPy.Plot import bokeh_aggregated_precursors\n   26: from MassTodonPy.Plot import bokeh_aggregated_fragments\n   27: from MassTodonPy.Plot import bokeh_aggregated_fragments_estimated\n   28  \n   29  bokeh_spectrum(masstodon, path=path + 'assignes_spectrum.html', show=True)\n\n/Users/matteo/Projects/MassTodonPy/Development/reading_spectrum.py:\n    2  %autoreload 2\n    3  \n    4: import csv\n    5  \n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.Spectra.Read import read_spectrum\n    8  \n    9  path = '/Users/matteo/Downloads/spektra_Posen/H4-qb.mzML'\n\n/Users/matteo/Projects/MassTodonPy/Development/simulator.py:\n    1: import numpy as np\n    2: from numpy.random import multinomial, normal\n    3: from MassTodonPy.Spectra.operations import merge_runs\n    4  \n    5  \n\n/Users/matteo/Projects/MassTodonPy/Development/testing_conditioning.py:\n    2  %autoreload 2\n    3  \n    4: import numpy as np\n    5  \n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.Formula.Formula import Formula\n    8: from MassTodonPy.Molecule.Molecule import Molecule\n    9  \n   10  N = 5\n\n/Users/matteo/Projects/MassTodonPy/Development/AminoAcids/get_amino_acids.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_amino_acids import get_amino_acids\n    5  \n    6  AAs = get_amino_acids()\n\n/Users/matteo/Projects/MassTodonPy/Development/AminoAcids/makeAminoAcids.py:\n    1: import numpy as np\n    2: import json\n    3: from collections import namedtuple\n    4  try:\n    5:     import cPickle as pickle\n    6: except ImportError:\n    7:     import pickle\n    8  \n    9  path = \"/Users/matteo/Documents/MassTodon/MassTodonPy/MassTodonPy/Data/\"\n   ..\n   49  \n   50  \n   51: import cPickle as pickle\n   52: from collections import namedtuple\n   53  AminoAcid = namedtuple(\"AminoAcid\", (\"N\", \"C_alpha\", \"C_carbo\"))\n   54  \n   ..\n   62  \n   63  \n   64: from MassTodonPy.AminoAcid.aminoAcid import AminoAcid\n   65  \n   66  with open(path+\"amino_acids2.pickle\", \"rb\") as f:\n\n/Users/matteo/Projects/MassTodonPy/Development/Bokeh/serializing_bokeh.py:\n    1: from random import random\n    2  \n    3: from bokeh.layouts import column\n    4: from bokeh.models import Button\n    5: from bokeh.palettes import RdYlBu3\n    6: from bokeh.plotting import figure, curdoc\n    7  \n    8  # create a plot and style its properties\n\n/Users/matteo/Projects/MassTodonPy/Development/Bokeh/testing_things.py:\n    1: import pandas as pd\n    2  \n    3: from bokeh.models import ColumnDataSource, LabelSet\n    4: from bokeh.plotting import figure, show, output_file\n    5: from bokeh.sampledata.periodic_table import elements\n    6  \n    7  elements = elements.copy()\n\n/Users/matteo/Projects/MassTodonPy/Development/calls/example_call.py:\n    1: from collections import defaultdict\n    2  \n    3: from MassTodonPy.Data.get_dataset import get_dataset\n    4: from MassTodonPy.MassTodon import MassTodon\n    5  \n    6  substanceP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Data/change_aa_storage.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_data import get_amino_acids\n    5  \n    6  AAs = get_amino_acids()\n    .\n   18  # AAs3 = [ tuple(counts) for  ]\n   19  \n   20: import json\n   21  \n   22  path = \"/Users/matteo/Documents/MassTodon/MassTodonPy/MassTodonPy/Data/\"\n   ..\n   30  lCnt({atom: count for atom, count in amino_acids[0][1][0][1]})\n   31  \n   32: from linearCounter.linearCounter import linearCounter as lCnt\n   33  amino_acids\n   34  \n\n/Users/matteo/Projects/MassTodonPy/Development/Data/createData.py:\n    1: from MassTodonPy import get_dataset\n    2: import json\n    3  \n    4  substanceP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Data/get_amino_acids.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_amino_acids import get_amino_acids\n    5  \n    6  get_amino_acids()\n\n/Users/matteo/Projects/MassTodonPy/Development/Data/get_dataset.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5  \n    6  subP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Data/import_py3.py:\n    1: import pickle\n    2  \n    3  data_path = \"/Users/matteo/Documents/MassTodon/MassTodonPy/MassTodonPy/Data/\"\n\n/Users/matteo/Projects/MassTodonPy/Development/Data/isotopic_info.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_data import get_isotopic_masses_and_probabilities\n    5: import json\n    6: from collections import namedtuple, defaultdict\n    7  \n    8  data_path = \"/Users/matteo/Documents/MassTodon/MassTodonPy/MassTodonPy/Data/\"\n\n/Users/matteo/Projects/MassTodonPy/Development/Data/storage.py:\n    1: from MassTodonPy.Data.get_isotopes import get_isotopic_masses_and_probabilities_raw\n    2  \n    3  \n\n/Users/matteo/Projects/MassTodonPy/Development/Deconvolutor/ciacho_wanda.py:\n    2  %autoreload 2\n    3  \n    4: from collections import Counter\n    5: import matplotlib.pyplot as plt\n    6: import networkx as nx\n    7  \n    8: from MassTodonPy.Data.get_dataset import get_dataset\n    9: from MassTodonPy.Deconvolution.Deconvolve import deconvolve\n   10  \n   11  # %time\n\n/Users/matteo/Projects/MassTodonPy/Development/Deconvolutor/deconvolutor.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5: from MassTodonPy.Deconvolutor.Deconvolutor import deconvolve\n    6: from MassTodonPy.Misc.cvxopt_wrapper import cvxopt_wrapper\n    7  \n    8  %%time\n\n/Users/matteo/Projects/MassTodonPy/Development/Deconvolutor/pickling.py:\n    2  %autoreload 2\n    3  \n    4: import pickle\n    5: from MassTodonPy.Data.get_dataset import get_dataset\n    6: from MassTodonPy.Deconvolutor.PeakPicker import get_deconvolution_graphs\n    7: from MassTodonPy.Deconvolutor.DeconvolutionProblem import DeconvolutionProblem\n    8  \n    9  mol = get_dataset('substanceP') # adjust the spectrum\n\n/Users/matteo/Projects/MassTodonPy/Development/Formula/Formula.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Formula.Formula import Formula\n    5  \n    6  f = Formula('C100H202')\n\n/Users/matteo/Projects/MassTodonPy/Development/Formula/LinearDict.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Formula.LinearDict import LinearDict\n    5  \n    6  \n\n/Users/matteo/Projects/MassTodonPy/Development/Graph_Ops/DAG_to_TREE.py:\n    1: from collections import Counter, defaultdict\n    2: import networkx as nx\n    3: import matplotlib.pyplot as plt\n    4  \n    5: from MassTodonPy.Data.Constants import infinity\n    6  options = {'node_color': 'black',\n    7             'node_size': 2,\n\n/Users/matteo/Projects/MassTodonPy/Development/IsotopeCalculator/fiddle.py:\n    1: import numpy as np\n    2: import json\n    3: from collections import namedtuple\n    4  \n    5  try:\n    6:     import cPickle as pickle\n    7: except ImportError:\n    8:     import pickle\n    9  \n   10  path = \"/Users/matteo/Documents/MassTodon/MassTodonPy/MassTodonPy/Data/\"\n\n/Users/matteo/Projects/MassTodonPy/Development/IsotopeCalculator/IsotopeCalculator.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5: from MassTodonPy.Precursor.Precursor import Precursor\n    6: from MassTodonPy.IsotopeCalculator.IsotopeCalculator import IsotopeCalculator\n    7  \n    8  subP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/JavaScript/get_plot.py:\n    2  %autoreload 2\n    3  \n    4: from collections import defaultdict\n    5: import csv\n    6  \n    7: from MassTodonPy.Data.get_dataset import get_dataset\n    8: from MassTodonPy.MassTodon import MassTodon\n    9: from MassTodonPy.Parsers.Paths import parse_path\n   10  \n   11  substanceP = get_dataset('substanceP')\n   ..\n   32  plot_json['renderers']\n   33  \n   34: from bokeh.embed import components, autoload_static\n   35: from bokeh.resources import CDN\n   36  \n   37  help(CDN)\n\n/Users/matteo/Projects/MassTodonPy/Development/JavaScript/json_serialization.py:\n    3  \n    4  \n    5: from collections import defaultdict\n    6: import csv\n    7  \n    8: from bokeh.core.json_encoder import serialize_json, BokehJSONEncoder\n    9  \n   10: from MassTodonPy.Data.get_dataset import get_dataset\n   11: from MassTodonPy.MassTodon import MassTodon\n   12: from MassTodonPy.Parsers.Paths import parse_path\n   13  \n   14  substanceP = get_dataset('substanceP')\n   ..\n   31  help(BokehJSONEncoder)\n   32  \n   33: from bokeh.document import Document\n   34  \n   35  doc = Document()\n   ..\n   37  \n   38  \n   39: from bokeh.resources import CDN\n   40: from bokeh.embed import autoload_static\n   41  \n   42  help(plot)\n\n/Users/matteo/Projects/MassTodonPy/Development/JavaScript/read_masstodon_input.py:\n    1: import json\n    2: from pprint import pprint\n    3  \n    4  with open('masstodon_input.json', 'r') as f:\n\n/Users/matteo/Projects/MassTodonPy/Development/MatchMaker/MatchesFiddle.py:\n    2  %autoreload 2\n    3  \n    4: from cvxopt import  matrix, spmatrix, sparse, spdiag, solvers\n    5: import networkx as nx\n    6: from networkx import connected_component_subgraphs as connected_components\n    7: import numpy as np\n    8  \n    9: from MassTodonPy.Data.get_dataset import get_dataset\n   10: from MassTodonPy.Data.Constants import eps\n   11: from MassTodonPy.Misc.cvxopt_wrapper import cvxopt_wrapper\n   12: from MassTodonPy.MatchMaker.SimpleCzMatch import SimpleCzMatch, diag, incidence_matrix\n   13: from MassTodonPy.MatchMaker.CzMatch import CzMatch\n   14: from MassTodonPy.MatchMaker.RegularizedCzMatch import RegularizedCzMatch\n   15  \n   16  \n\n/Users/matteo/Projects/MassTodonPy/Development/MatchMaker/MatchMaker.py:\n    2  %autoreload 2\n    3  \n    4: import matplotlib.pyplot as plt\n    5: import networkx as nx\n    6  \n    7: from MassTodonPy.Data.get_dataset import get_dataset\n    8: from MassTodonPy.Deconvolutor.Deconvolutor import deconvolve\n    9: from MassTodonPy.Misc.cvxopt_wrapper import cvxopt_wrapper\n   10: from MassTodonPy.MatchMaker.match_cz_ions import match_cz_ions, czMatchMaker, czMatchMakerBasic\n   11  \n   12  \n\n/Users/matteo/Projects/MassTodonPy/Development/MatchMaker/max_flow_min_cost_approach.py:\n    2  %autoreload 2\n    3  \n    4: import networkx as nx\n    5  \n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.Deconvolutor.Deconvolutor import deconvolve\n    8: from MassTodonPy.MatchMaker.SimpleCzMatch import SimpleCzMatch\n    9  \n   10  mol = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/MatchMaker/test_match_maker.py:\n    1: from __future__ import absolute_import, division, print_function\n    2: from collections import Counter\n    3: import unittest\n    4  \n    5: from MassTodonPy.Data.get_dataset import get_dataset\n    6: from MassTodonPy.MatchMaker.SimpleCzMatch import SimpleCzMatch\n    7  \n    8  \n\n/Users/matteo/Projects/MassTodonPy/Development/MatchMaker/testing_matchmakers.py:\n    3  \n    4  \n    5: from collections import defaultdict\n    6: import csv\n    7  \n    8: from MassTodonPy.Data.get_dataset import get_dataset\n    9: from MassTodonPy.MassTodon import MassTodon\n   10: from MassTodonPy.Parsers.Paths import parse_path\n   11  \n   12  substanceP = get_dataset('substanceP')\n   ..\n   38                              adv['ETDorHTR_bond'][k] - simple['ETDorHTR_bond'][k]))\n   39  \n   40: from MassTodonPy.MatchMaker.SimpleCzMatch import SimpleCzMatch\n   41  \n   42  masstodon.molecules\n\n/Users/matteo/Projects/MassTodonPy/Development/MatchMaker/write.py:\n    2  %autoreload 2\n    3  \n    4: from collections import defaultdict\n    5  \n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.MassTodon import MassTodon\n    8: from MassTodonPy.Parsers.Paths import parse_path\n    9  \n   10  substanceP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Molecule/making_formulator2.py:\n    2  %autoreload 2\n    3  \n    4: from collections import defaultdict\n    5: from linearCounter.linearCounter import linearCounter as lCnt\n    6: import re\n    7  \n    8: from MassTodonPy.Formulator.formulator import get_formulas\n    9: from MassTodonPy.Data.get_data import get_dataset, get_amino_acids\n   10  \n   11  mol = get_dataset(\"substanceP\")\n\n/Users/matteo/Projects/MassTodonPy/Development/Molecule/making_iterator_MoleculeMaker.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_data import get_dataset, get_amino_acids\n    5: from MassTodonPy.MoleculeMaker.MoleculeMaker import MoleculeMaker, make_molecules\n    6  \n    7  mol = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Molecule/Molecule.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5: from MassTodonPy.Precursor.Precursor import Precursor\n    6: from MassTodonPy.IsotopeCalculator.IsotopeCalculator import IsotopeCalculator\n    7  \n    8  subP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Old/deconvolutor.py:\n   18  \n   19  \n   20: from    math        import sqrt\n   21: from    collections import Counter\n   22: from    random      import randint\n   23: from    cvxopt      import matrix, spmatrix, sparse, spdiag, solvers, setseed\n   24: import  traceback\n   25  \n   26  class Error_in_update_scaling(Exception):\n\n/Users/matteo/Projects/MassTodonPy/Development/Old/reading_spectrum.py:\n    2  %autoreload 2\n    3  \n    4: import matplotlib.pyplot as plt\n    5: import networkx as nx\n    6  \n    7: from MassTodonPy.Data.get_dataset import get_dataset\n    8: from MassTodonPy.Deconvolutor.Deconvolutor import deconvolve\n    9: from MassTodonPy.Misc.cvxopt_wrapper import cvxopt_wrapper\n   10: from MassTodonPy.MatchMaker.match_cz_ions import match_cz_ions, czMatchMaker, czMatchMakerBasic\n   11  \n   12  \n\n/Users/matteo/Projects/MassTodonPy/Development/Old/solver.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from MassTodonPy.Deconvolutor import deconvolve\n   20: from MassTodonPy.Misc import cvxopt_wrapper\n   21: from time import time\n   22: from multiprocessing import Pool\n   23: from itertools import repeat\n   24: from collections import Counter\n   25  \n   26  \n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/clusters_from_arrays.py:\n    3  %load_ext line_profiler\n    4  \n    5: from collections            import  Counter\n    6: import numpy                as      np\n    7: import matplotlib.pyplot    as      plt\n    8: from   time                 import  time\n    9: import intervaltree         as      iTree\n   10: import networkx             as      nx\n   11: from networkx               import  connected_component_subgraphs\n   12  \n   13: from MassTodonPy.readers.from_npy             import spectrum_from_npy\n   14: from MassTodonPy.Precursor.simple             import precursor\n   15: from MassTodonPy.IsotopeCalculator.simple     import isotope_calculator\n   16: from MassTodonPy.Spectra.orbitrap.peak_groups import bitonic_clustering\n   17: from MassTodonPy.Spectra.simple               import spectrum\n   18: from MassTodonPy.Molecule.simple              import molecule\n   19: from MassTodonPy.Formula.Formula              import formula\n   20: from MassTodonPy.Molecule.simple              import Molecule\n   21  \n   22  # generating subspectra\n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/futile_attemp_with_quantile_estimator.py:\n    1: from scipy.stats import norm\n    2  \n    3  \n    .\n   58  def numpy_weighted_median(data, weights=None):\n   59      \"\"\"Calculate the weighted median of an array/list using numpy.\"\"\"\n   60:     import numpy as np\n   61      if weights is None:\n   62          return np.median(np.array(data).flatten())\n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/graph_construction.py:\n    3  %load_ext line_profiler\n    4  \n    5: from collections            import  Counter\n    6: import numpy                as      np\n    7: import matplotlib.pyplot    as      plt\n    8: from   time                 import  time\n    9: import intervaltree         as      iTree\n   10: import networkx             as      nx\n   11: from networkx               import  connected_component_subgraphs\n   12  \n   13: from MassTodonPy.readers.from_npy             import spectrum_from_npy\n   14: from MassTodonPy.Precursor.simple             import precursor\n   15: from MassTodonPy.IsotopeCalculator.simple     import isotope_calculator\n   16: from MassTodonPy.Spectra.orbitrap.peak_groups import bitonic_clustering\n   17: from MassTodonPy.Spectra.simple               import spectrum\n   18: from MassTodonPy.Molecule.simple              import molecule\n   19: from MassTodonPy.Formula.Formula              import formula\n   20  \n   21  \n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/graphs_and_screening.py:\n    3  %load_ext line_profiler\n    4  \n    5: from collections            import  defaultdict, namedtuple, Counter\n    6: import numpy                as      np\n    7: import networkx             as      nx\n    8: import matplotlib.pyplot    as      plt\n    9: from   time                 import  tipme\n   10: import pandas               as      pd\n   11: from   math                 import  log10, floor\n   12  \n   13: from MassTodonPy.readers.from_npy               import spectrum_from_npy\n   14: from MassTodonPy.Precursor.simple               import precursor\n   15: from MassTodonPy.IsotopeCalculator.simple       import isotope_calculator\n   16: from MassTodonPy.Spectra.orbitrap.peak_groups   import bitonic_clustering\n   17: from MassTodonPy.Spectra.simple                 import spectrum\n   18: from MassTodonPy.Molecule.simple                import molecule\n   19: from MassTodonPy.Formula.Formula                import formula\n   20: from MassTodonPy.Molecule.simple                import Molecule\n   21: from MassTodonPy.stats.simple_normal_estimators import mean, sd\n   22: from MassTodonPy.Data.Constants                 import infinity\n   23: from MassTodonPy.models.polynomial              import polynomial\n   24: from MassTodonPy.Spectra.lightweight            import lightweight_spectrum\n   25: from MassTodonPy.Deconvolution.divide_ed_impera import divide_ed_impera, Imperator, ImperatorMagnus\n   26: from MassTodonPy.preprocessing.filters          import filter_subspectra_molecules\n   27: from MassTodonPy.Deconvolution.simple           import DeconvolutionProblem\n   28: from MassTodonPy.plotters.graphs                import plot_numbered_graph\n   29: from MassTodonPy.plotters.spectrum              import plot_spectrum\n   30  \n   31  # generating subspectra\n   ..\n   59                                                           mols,\n   60                                                           std_cnt = 3)\n   61: # attention: the sd's will surely change!!! Good! :) Will they? They are not so important.\n   62  # The bloody interval widths fully replace this concept.\n   63  # to delete\n   ..\n   89  \n   90  \n   91: from networkx.linalg.attrmatrix import attr_matrix\n   92  # plt_style = 'default'\n   93  # plt.style.use(plt_style)\n   ..\n  143      Y_all.extend(Y[Y>0])\n  144  \n  145: import matplotlib\n  146  # matplotlib.rcParams['figure.figsize'] = 400, 12\n  147  plt.bar(mz_all, pred_all, mz_widths,\n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/matplotlib_colors.py:\n    1: import matplotlib.pyplot as plt\n    2  \n    3  \n    4: import numpy as np\n    5: import matplotlib as mpl\n    6: import matplotlib.pyplot as plt\n    7: from matplotlib import cm\n    8: from collections import OrderedDict\n    9  \n   10  cmaps = OrderedDict()\n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/orbitrap_spectrum.py:\n    1: from bisect import bisect_left, bisect_right\n    2  \n    3: from MassTodonPy.Measure.Measure    import Measure\n    4: from MassTodonPy.plotters.spectrum  import plot_spectrum\n    5  \n    6  \n    .\n   49  \n   50  # orbi_spec = OrbitrapSpectrum(mz, intensity)\n   51: # from MassTodonPy.models.model import plot\n   52  # plot(orbi_spec)\n   53  # orbi_spec.zoom(1250, 1500)\n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/playing_with_IsoSpec.py:\n    1: from MassTodonPy.IsotopeCalculator.isospec_wrapper import isospec_numpy\n    2: from IsoSpecPy.IsoSpecPy import IsoSpec as isospec\n    3  \n    4: import numpy as np\n    5  \n    6  isospec_numpy((100,200),\n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/preprocessing.py:\n    3  %load_ext line_profiler\n    4  \n    5: import numpy as np\n    6: import matplotlib.pyplot as plt\n    7  \n    8: from MassTodonPy.plotters.spectrum              import plot_spectrum\n    9: from MassTodonPy.readers.from_npy               import spectrum_from_npy\n   10: from MassTodonPy.Spectra.peak_clustering        import mz_bitonic\n   11: from MassTodonPy.Spectra.peak_clustering        import iter_cluster_ends\n   12: from MassTodonPy.Spectra.orbitrap_peak_groups   import bitonic_clustering\n   13: from MassTodonPy.models.polynomial              import polynomial\n   14: from MassTodonPy.models.spline                  import spline\n   15: from MassTodonPy.stats.simple_normal_estimators import mean, sd\n   16: from MassTodonPy.plotters.spectrum              import plot_peak_group\n   17  \n   18  \n   ..\n   85  #     cluster_no += 1\n   86  # plt.show()\n   87: from MassTodonPy.Spectra.orbitrap.spectrum import OrbitrapSpectrum\n   88  \n   89  orbi = OrbitrapSpectrum(mz, intensity)\n   ..\n   91  \n   92  \n   93: from MassTodonPy.Data.get_dataset import get_dataset\n   94  \n   95  \n\n/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/skewnesses.py:\n    3  %load_ext line_profiler\n    4  \n    5: from collections            import  Counter\n    6: import numpy                as      np\n    7: import matplotlib.pyplot    as      plt\n    8: from   time                 import  time\n    9: import intervaltree         as      iTree\n   10: import networkx             as      nx\n   11: from   networkx             import  connected_component_subgraphs\n   12: import pandas               as      pd\n   13  \n   14: from MassTodonPy.readers.from_npy             import spectrum_from_npy\n   15: from MassTodonPy.Precursor.simple             import precursor\n   16: from MassTodonPy.IsotopeCalculator.simple     import isotope_calculator\n   17: from MassTodonPy.Spectra.orbitrap.peak_groups import bitonic_clustering\n   18: from MassTodonPy.Spectra.simple               import spectrum\n   19: from MassTodonPy.Molecule.simple              import molecule\n   20: from MassTodonPy.Formula.Formula              import formula\n   21: from MassTodonPy.Molecule.simple              import Molecule\n   22: from MassTodonPy.stats.simple_normal_estimators   import mean,\\\n   23                                                           sd\n   24: from MassTodonPy.Data.Constants import infinity\n   25  \n   26  # generating subspectra\n\n/Users/matteo/Projects/MassTodonPy/Development/Paper/supplement.py:\n    2  %autoreload 2\n    3  \n    4: import matplotlib.pyplot as plt\n    5: import networkx as nx\n    6  \n    7: from MassTodonPy.Data.get_dataset import get_dataset\n    8: from MassTodonPy.Deconvolutor.Deconvolutor import deconvolve\n    9: from MassTodonPy.Misc.cvxopt_wrapper import cvxopt_wrapper\n   10: from MassTodonPy.MatchMaker.SimpleCzMatch import SimpleCzMatch\n   11: from MassTodonPy.MatchMaker.CzMatch import CzMatch\n   12: from MassTodonPy.MatchMaker.RegularizedCzMatch import RegularizedCzMatch\n   13  \n   14  # %%time\n\n/Users/matteo/Projects/MassTodonPy/Development/Paper/ubiquitin_masses.py:\n    1: from MassTodonPy.Formulator.formulator import make_formulas\n    2: from MassTodonPy.IsotopeCalculator.isotopeCalculator import IsotopeCalculator\n    3  \n    4  fasta = 'MQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG'\n\n/Users/matteo/Projects/MassTodonPy/Development/PeakPicker/PeakPicker.py:\n    2  %autoreload 2\n    3  \n    4: from math import ceil, log10\n    5: from MassTodonPy.Data.get_dataset import get_dataset\n    6: from MassTodonPy.MoleculeMaker.Precursor import Precursor\n    7: from MassTodonPy.MoleculeMaker.MoleculeMaker import get_molecules\n    8: from MassTodonPy.Spectra.Spectrum import Spectrum\n    9: from MassTodonPy.PeakPicker.PeakPicker import PeakPicker\n   10: from MassTodonPy.IsotopeCalculator.IsotopeCalculator import IsotopeCalculator\n   11  \n   12  mol = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/PeakPicker/test_PeakPicker.py:\n    1  \"\"\"Testing the setting up of the deconvolution problems.\"\"\"\n    2: from __future__ import absolute_import, division, print_function\n    3: from collections import Counter\n    4: import unittest\n    5  \n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.Deconvolutor.PeakPicker import get_deconvolution_problems\n    8: from MassTodonPy.Spectra.ExperimentalSpectrum import ExperimentalSpectrum\n    9  \n   10  \n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/big_plot_0.py:\n    2  %autoreload 2\n    3  \n    4: from bokeh.plotting import ColumnDataSource, figure, output_file, show\n    5: from bokeh.models import HoverTool\n    6: from collections import Counter, defaultdict\n    7: from operator import sub\n    8  \n    9: from Development.Plots.run_masstodon import get_masstodon_results\n   10: from MassTodonPy.Reporer.buffers import buffers\n   11  \n   12  # TODO:\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/big_plot_rectangles.py:\n    2  %autoreload 2\n    3  \n    4: from bokeh.plotting import ColumnDataSource, figure, output_file, show\n    5: from bokeh.models import HoverTool\n    6: from bokeh.palettes import viridis, Colorblind, Paired, Set3, Set1\n    7: from itertools import cycle\n    8  \n    9: from Development.Plots.run_masstodon import get_masstodon_results\n   10: from MassTodonPy.Reporter.buffers import buffers\n   11  \n   12  masstodon = get_masstodon_results()\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/bokeh_example_stacking.py:\n    1: from bokeh.core.properties import value\n    2: from bokeh.io import show, output_file\n    3: from bokeh.models import ColumnDataSource\n    4: from bokeh.plotting import figure\n    5: from bokeh.models import HoverTool\n    6  \n    7  output_file(\"stacked.html\", mode='inline')\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/fragments.py:\n    1: from bokeh.io import show, output_file\n    2: from bokeh.models import ColumnDataSource, FactorRange\n    3: from bokeh.plotting import figure\n    4: from bokeh.transform import factor_cmap\n    5  \n    6  output_file(\"bar_nested_colormapped.html\")\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/fragments_plots.py:\n    3  \n    4  \n    5: from collections import defaultdict\n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.MassTodon import MassTodon\n    8: from MassTodonPy.Parsers.Paths import parse_path\n    9  \n   10  substanceP = get_dataset('substanceP')\n   ..\n   24  # masstodon.write(path)\n   25  self = masstodon.report\n   26: # from MassTodonPy.Plot.bokeh_spectrum import bokeh_spectrum\n   27: # from MassTodonPy.Plot.bokeh_aggregated_precursors import bokeh_aggregated_precursors\n   28: # from MassTodonPy.Plot.bokeh_fragments_intensity import bokeh_fragments_intensity\n   29  #\n   30  # bokeh_spectrum(masstodon, path + 'assigned_spectrum.html')\n   ..\n   33  \n   34  \n   35: from MassTodonPy.Plot.bokeh_aggregated_fragments import bokeh_aggregated_fragments\n   36: from MassTodonPy.Plot.bokeh_aggregated_fragments_estimated import bokeh_aggregated_fragments_estimated\n   37  \n   38  bokeh_aggregated_fragments(masstodon, show=True)\n   ..\n   40  \n   41  \n   42: from bokeh.plotting import ColumnDataSource, figure, output_file, show\n   43: from bokeh.models import HoverTool, LabelSet\n   44: from MassTodonPy.Misc.io import create_folder_if_needed\n   45  \n   46  \n   47: from bokeh.plotting import figure, show, output_file\n   48: from bokeh.models import ColumnDataSource, LabelSet\n   49  \n   50  list(self.iter_aggregated_fragments_intensity())\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/latex_labels.py:\n    1: import numpy as np\n    2  \n    3: from bokeh.models import Label\n    4: from bokeh.plotting import figure, show\n    5  \n    6  JS_CODE = \"\"\"\n    7: import {Label, LabelView} from \"models/annotations/label\"\n    8  \n    9  export class LatexLabelView extends LabelView\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/run_masstodon.py:\n    1: from collections import Counter, defaultdict\n    2  \n    3: from MassTodonPy.Data.Constants import infinity\n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5: from MassTodonPy.MassTodon import MassTodon\n    6: from MassTodonPy.Plotting.plot_buffers import buffers\n    7: from MassTodonPy.Misc.sorting import sort_by_first\n    8: from MassTodonPy.Spectra.Spectrum import Spectrum\n    9  \n   10  def get_masstodon_results():\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/spectrum_plot.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5  \n    6  substanceP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/stackoverflow_0.py:\n    1: from bokeh.core.properties import value\n    2: from bokeh.io import show, output_file\n    3: from bokeh.models import ColumnDataSource\n    4: from bokeh.plotting import figure\n    5: from bokeh.models import HoverTool\n    6  \n    7  fruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/stackoverflow_1.py:\n    1: from bokeh.charts import Bar, show\n    2: import pandas as pd\n    3  \n    4  data_dict = { 'numstudents' : [43, 22, 1,\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/stackoverflow_2.py:\n    1: from collections import defaultdict\n    2  \n    3: import numpy as np\n    4: from scipy.stats import norm\n    5  \n    6: from bokeh.plotting import show, figure\n    7: from bokeh.models import ColumnDataSource, HoverTool\n    8: from bokeh.palettes import Viridis6\n    9  \n   10  RT_x = np.linspace(118, 123, num=50)\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/test_data_input.py:\n    1: from bokeh.plotting import ColumnDataSource, figure, output_file, show\n    2: from bokeh.models import HoverTool, Span, LabelSet\n    3  \n    4  tools = \"crosshair pan wheel_zoom box_zoom undo redo reset box_select save\".split(\" \")\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/testing_stacking.py:\n    2  %autoreload 2\n    3  \n    4: from bokeh.plotting import ColumnDataSource, figure, output_file, show\n    5: from bokeh.models import HoverTool\n    6: from collections import Counter, defaultdict\n    7: import numpy as np\n    8  \n    9: from MassTodonPy.Data.Constants import infinity\n   10: from MassTodonPy.Data.get_dataset import get_dataset\n   11: from MassTodonPy.MassTodon import MassTodon\n   12: from MassTodonPy.Misc.plot_buffers import buffers\n   13: from MassTodonPy.Misc.sorting import sort_by_first\n   14: from MassTodonPy.Spectra.Spectrum import Spectrum\n   15  \n   16  substanceP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Plots/using_rectangles.py:\n    1: from bokeh.plotting import figure, show, output_file, ColumnDataSource\n    2: from bokeh.models import HoverTool\n    3: from bokeh.palettes import viridis\n    4: # from bokeh.themes.theme import Theme\n    5  #\n    6  # theme = Theme(filename=\"./theme.yaml\")\n\n/Users/matteo/Projects/MassTodonPy/Development/Precursor/debugging.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5: from MassTodonPy.Data.get_amino_acids import get_amino_acids\n    6: from MassTodonPy.MoleculeMaker.Precursor import Precursor\n    7  \n    8  mol = get_dataset('substanceP').precursor\n\n/Users/matteo/Projects/MassTodonPy/Development/Precursor/Precursor.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5: from MassTodonPy.Precursor.Precursor import Precursor\n    6  \n    7  subP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Spectrum/iterating_over_mzxml.py:\n    1: from pyteomics import mzxml\n    2: from collections import defaultdict, Counter\n    3  \n    4  spectrum_path = '/Users/matteo/Documents/MassTodon/Data/'\n\n/Users/matteo/Projects/MassTodonPy/Development/Spectrum/Measure.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Spectra.Measure import Measure\n    5: from MassTodonPy.Spectra.ExperimentalSpectrum import ExperimentalSpectrum\n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7  \n    8  subP = get_dataset('substanceP')\n\n/Users/matteo/Projects/MassTodonPy/Development/Spectrum/Read.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Spectra.Measure import Measure\n    5: from MassTodonPy.Spectra.ExperimentalSpectrum import ExperimentalSpectrum\n    6: from MassTodonPy.Data.get_dataset import get_dataset\n    7: from MassTodonPy.Spectra.Read import _read_mz\n    8  \n    9  spectrum_path = '/Users/matteo/Documents/MassTodon/Data/'\n\n/Users/matteo/Projects/MassTodonPy/Development/Spectrum/reading_pure_mzxml.py:\n    1  %load_ext autoreload\n    2  %autoreload 2\n    3: from six.moves import reduce\n    4: from MassTodonPy.Spectra.Read import read_mzxml_spectrum,\\\n    5                                       read_mzxml_spectrum_faster,\\\n    6                                       stack_spectra\n\n/Users/matteo/Projects/MassTodonPy/Development/Spectrum/reading_txt.py:\n    1  %load_ext autoreload\n    2  %autoreload 2\n    3: from six.moves import reduce\n    4: from MassTodonPy.Spectra.Read import read_txt_spectrum,\\\n    5                                       stack_spectra\n    6  \n\n/Users/matteo/Projects/MassTodonPy/Development/Spectrum/Spectrum.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Spectra.Spectrum import Spectrum\n    5: from MassTodonPy.Data.Constants import eps, infinity\n    6  \n    7  spectrum_path = '/Users/matteo/Documents/MassTodon/Data/'\n    .\n   14  ms.plot()\n   15  \n   16: import numpy as np\n   17  \n   18  \n   ..\n   41  ms.spectrum\n   42  \n   43: from MassTodonPy.Data.get_dataset import get_dataset\n   44  mol = get_dataset('substanceP')\n   45  \n\n/Users/matteo/Projects/MassTodonPy/Development/Spectrum/SpectrumParser.py:\n    2  %autoreload 2\n    3  \n    4: from MassTodonPy.Data.get_dataset import get_dataset\n    5: from MassTodonPy.Spectra.SpectrumParser import \\\n    6      read_n_preprocess_spectrum\n    7: from MassTodonPy.Spectra.operations import remove_lower_quantile\n    8  \n    9  \n\n/Users/matteo/Projects/MassTodonPy/Development/Tests/PeakPicker2.py:\n   10  # The test should check what m/z are present and where they should be\n   11  \n   12: from collections import Counter\n   13: from networkx import connected_component_subgraphs as components\n   14: import matplotlib.pyplot as plt\n   15: import networkx as nx\n   16  \n   17: from MassTodonPy.Data.get_dataset import get_dataset\n   18: from MassTodonPy.PeakPicker.PeakPicker import get_deconvolution_problems\n   19: from MassTodonPy.Spectra.ExperimentalSpectrum import ExperimentalSpectrum\n   20  \n   21  options = {'node_color': 'black',\n\n/Users/matteo/Projects/MassTodonPy/Development/Tests/test_isotope_calculator.py:\n    2  %autoreload 2\n    3  \n    4: from __future__ import absolute_import, division, print_function\n    5: import numpy as np\n    6  \n    7: from MassTodonPy.IsotopeCalculator.IsotopeCalculator import IsotopeCalculator\n    8: from MassTodonPy.Misc.binomial import binomial\n    9  \n   10  iso_calc = IsotopeCalculator(mz_precision=0,\n\n/Users/matteo/Projects/MassTodonPy/docs/source/conf.py:\n   14  #\n   15  \n   16: import os\n   17: import sys\n   18: from recommonmark.parser import CommonMarkParser\n   19: from mock import Mock as MagicMock\n   20  \n   21: # from recommonmark.transform import AutoStructify\n   22  # sys.path.insert(0, os.path.abspath('.'))\n   23  sys.path.insert(0, os.path.abspath('../../MassTodonPy'))\n\n/Users/matteo/Projects/MassTodonPy/docs/source/examples.md:\n   76  ### Python Scripting\n   77  \n   78: The simplest way to use the MassTodon in your Python script is to import the **MassTodon** function from the MassTodonPy module. \n   79  A simple script used to run the previous example peptide, would look like this:\n   80  \n   81  ```python\n   82: from MassTodonPy import MassTodon\n   83  \n   84  res = MassTodonize( fasta           = AAAGGGVVAGV,\n   ..\n   96  \n   97  ```python\n   98: from MassTodonPy.Plot import bokeh_spectrum\n   99: from MassTodonPy.Plot import bokeh_aggregated_precursors\n  100: from MassTodonPy.Plot import bokeh_aggregated_fragments\n  101: from MassTodonPy.Plot import bokeh_estimated_aggregated_fragments\n  102  \n  103  bokeh_spectrum(res)\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/LICENCE:\n  455  (including a cross-claim or counterclaim in a lawsuit) alleging that\n  456  any patent claim is infringed by making, using, selling, offering for\n  457: sale, or importing the Program or any portion of it.\n  458  \n  459  11. Patents.\n  ...\n  475  Each contributor grants you a non-exclusive, worldwide, royalty-free\n  476  patent license under the contributor's essential patent claims, to\n  477: make, use, sell, offer for sale, import and otherwise run, modify and\n  478  propagate the contents of its contributor version.\n  479  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/MassTodon.py:\n   65  # .7.......7....OOOOO....ZOZI....:ZOZ......Z.....ZOZ7.....OZZ.....7ZOZ....Z....Z..\n   66  # ................................................................................\n   67: from __future__     import absolute_import, division, print_function\n   68: from collections    import Counter\n   69: from math           import ceil, log10\n   70: from time           import time\n   71: import csv\n   72: import os\n   73  \n   74: from MassTodonPy.Data.Constants             import eps\n   75: from MassTodonPy.Deconvolution.Deconvolve   import build_deconvolution_graph\n   76: from MassTodonPy.Deconvolution.Deconvolve   import deconvolve\n   77: from MassTodonPy.MatchMaker.CzMatch         import CzMatch\n   78: from MassTodonPy.MatchMaker.SimpleCzMatch   import SimpleCzMatch\n   79: from MassTodonPy.Misc.cvxopt_wrapper        import cvxopt_wrapper\n   80: from MassTodonPy.Parsers.Paths              import parse_path\n   81: from MassTodonPy.Plot.bokeh_spectrum        import bokeh_spectrum\n   82: from MassTodonPy.Precursor.Precursor        import Precursor\n   83: from MassTodonPy.Spectra.Spectrum           import Spectrum\n   84: from MassTodonPy.Reporter.Reporter          import Reporter\n   85  \n   86  #TODO: simplify this call: there are way too many explicit arguments\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/test_masstodon.py:\n    1: from __future__ import absolute_import, division, print_function\n    2: from collections import defaultdict, Counter\n    3: import unittest\n    4  \n    5: from MassTodonPy.Data.get_dataset import get_dataset\n    6: from MassTodonPy.MassTodon import MassTodon\n    7  \n    8  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/AminoAcid/aminoAcid.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: from collections import namedtuple\n   19  \n   20  AminoAcid = namedtuple(\"AminoAcid\", (\"N\", \"C_alpha\", \"C_carbo\"))\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/arrays/aggregations.py:\n    1: import numpy as np\n    2  \n    3  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/arrays/operations.py:\n    1  \"\"\"Various operations on arrays.\"\"\"\n    2  \n    3: import numpy as np\n    4: import pandas as pd\n    5  \n    6  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/CLI/AdditionalParsers.py:\n   16  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   17  \n   18: from MassTodonPy.Misc.strings import add_backslash\n   19  \n   20  def add_spectra_plots_parsing(parser):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/CLI/config_parser.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: # from collections import defaultdict\n   20: # import os\n   21: # from pprint import pprint\n   22: # import re\n   23  #\n   24: # from MassTodonPy.Data.Constants import eps\n   25  #\n   26  # def parse_str(name):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/CLI/JsonParser.py:\n    1: import json\n    2  \n    3: from MassTodonPy.Parsers.blocked_fragments import parse_blocked_fragments\n    4  \n    5  def parse_json(path):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/CLI/MassTodon_wrapper.py:\n    1: import json\n    2: import os\n    3  \n    4: from MassTodonPy.MassTodon import MassTodon\n    5: from MassTodonPy.CLI.PlotParser import plot_parser\n    6: from MassTodonPy.Plot import bokeh_spectrum\n    7: from MassTodonPy.Plot import bokeh_aggregated_fragments\n    8: from MassTodonPy.Plot import bokeh_estimated_aggregated_fragments\n    9: from MassTodonPy.Plot import bokeh_aggregated_precursors\n   10  \n   11  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/Constants.py:\n    1: \"\"\"Some important constants.\"\"\"\n    2: import numpy as np\n    3  \n    4  eps = np.finfo(float).eps\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/dummy.py:\n    1  \"\"\"Some simple an inoccuous dummy data and how to plot it.\"\"\"\n    2  \n    3: import numpy as np\n    4  \n    5  mz_dummy        = np.array([1.1, 1.2, 1.3, 1.4, 2.2, 2.3, 2.4, 2.5, 2.6, 2.8, 2.9, 3.0])\n    .\n    9  def plot_dummy():\n   10      \"\"\"Plot the dummy data.\"\"\"\n   11:     from MassTodonPy.plotters.spectrum import plot_spectrum\n   12:     from MassTodonPy.Spectra.peak_clustering import mz_bitonic\n   13      clusters_dummy = mz_bitonic(mz_dummy, intensity_dummy)\n   14      plot_spectrum(mz_dummy, intensity_dummy, list(clusters_dummy))\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/get_amino_acids.py:\n    1: import pkg_resources\n    2: import json\n    3  \n    4: from MassTodonPy.Formula.Formula import Formula\n    5  \n    6  \n    .\n   14      Possible backbone_atom_group include: N, C_carbo, C_alpha.\n   15      \"\"\"\n   16:     from MassTodonPy.Data.amino_acids import amino_acids as amino_acids_raw\n   17      amino_acids = {(aa_name, brick): Formula({a: c for a, c in atom_cnt})\n   18                     for aa_name, bricks in amino_acids_raw\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/get_dataset.py:\n    1: import pkg_resources\n    2: import json\n    3: import numpy as np\n    4  \n    5: from MassTodonPy.Precursor.Precursor import Precursor\n    6: from MassTodonPy.Spectra.Spectrum import Spectrum\n    7  \n    8  \n    .\n   37      \"\"\"\n   38      if dataset_name is 'substanceP':\n   39:         from MassTodonPy.Data.substanceP import substanceP as mol\n   40      else:\n   41          raise AttributeError(\"No data set of that name.\")\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/get_isotopes.py:\n    1: import pkg_resources\n    2: import json\n    3: from collections import defaultdict\n    4  \n    5  \n    .\n   15          The values of the first dictionary are lists of probabilities of elements.\n   16      \"\"\"\n   17:     from MassTodonPy.Data.isotopes import isotopes as isotopes_raw\n   18      iso_masses = defaultdict(list)\n   19      iso_probs  = defaultdict(list)\n   ..\n   28  def get_isotopic_masses():\n   29      \"\"\"Retrieve the information on masses of isotopes.\"\"\"\n   30:     from MassTodonPy.Data.isotopes import isotopes as isotopes_raw\n   31      iso_masses = defaultdict(list)\n   32      for element, isos in isotopes_raw:\n   ..\n   38  def get_isotopic_probabilities():\n   39      \"\"\"Retrieve the information on frequencies of isotopes.\"\"\"\n   40:     from MassTodonPy.Data.isotopes import isotopes as isotopes_raw\n   41      iso_probs  = defaultdict(list)\n   42      for element, isos in isotopes_raw:\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/DeconvolutionProblem.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from __future__ import absolute_import, division, print_function\n   20: from collections import Counter\n   21: import cvxopt\n   22: from cvxopt import matrix, spmatrix, sparse, spdiag, solvers, setseed\n   23: from future.builtins import super\n   24: import imp\n   25: from math import sqrt\n   26: import networkx as nx\n   27: from random import randint\n   28  \n   29: from MassTodonPy.Data.Constants import infinity\n   30: from MassTodonPy.Deconvolution.Misc import diag, normalize_rows\n   31: from MassTodonPy.Misc.cvxopt_wrapper import cvxopt_wrapper\n   32  \n   33  #TODO: try to eliminate copying while instantiating\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/Deconvolve.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from __future__  import absolute_import, division, print_function\n   20: from collections import Counter\n   21: from collections import defaultdict\n   22: import cvxopt\n   23: import imp\n   24: import networkx as      nx\n   25: from networkx   import  connected_component_subgraphs\n   26  \n   27: from MassTodonPy.Data.Constants import infinity\n   28: from MassTodonPy.Deconvolution.DeconvolutionProblem import DeconvolutionProblem\n   29: # from MassTodonPy.Deconvolution.Wanda_Ciacho_DeconvolutionProblem import GaussianDeconvolutionProblem\n   30: # from MassTodonPy.Misc.wrapper import cvxopt_wrapper\n   31  \n   32  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/divide_ed_impera.py:\n    4  Now, it really should.\"\"\"\n    5  \n    6: import  networkx            as      nx\n    7: from    collections         import  defaultdict, Counter\n    8: import  matplotlib.pyplot   as      plt\n    9  \n   10  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/misc.py:\n    1: from    networkx.linalg.attrmatrix  import attr_matrix\n    2: import  numpy                       as     np\n    3: from    scipy.optimize              import nnls\n    4  \n    5  def get_matrix_representation(G, total_intensities, min_mz, max_mz):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/Misc.py:\n    1: from __future__ import absolute_import, division, print_function\n    2: from cvxopt import matrix, spmatrix, sparse, spdiag, solvers, setseed\n    3: from six.moves import range\n    4  \n    5  def diag(val, dim):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/simple.py:\n    1: from    networkx.linalg.attrmatrix  import attr_matrix\n    2: import  numpy                       as     np\n    3: from    MassTodonPy.models.nnls     import nnls\n    4  \n    5  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/test_deconvolution.py:\n    1  \"\"\"Testing the setting up of the deconvolution problems.\"\"\"\n    2: from __future__ import absolute_import, division, print_function\n    3: from collections import Counter\n    4: import networkx as nx\n    5: import unittest\n    6  \n    7: from MassTodonPy.Data.get_dataset import get_dataset\n    8: from MassTodonPy.Deconvolution.Deconvolve import deconvolve, _glue_sister_isotopologues\n    9: from MassTodonPy.Spectra.Spectrum import Spectrum\n   10  \n   11  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/Wanda_Ciacho_DeconvolutionProblem.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: # from __future__ import absolute_import, division, print_function\n   20: # from cvxopt import matrix, spmatrix, sparse, spdiag, solvers, setseed\n   21: # from math import sqrt, exp, log, pi\n   22: # import networkx as nx\n   23  \n   24: # from MassTodonPy.Deconvolution.DeconvolutionProblem import DeconvolutionProblem\n   25  \n   26  \n   ..\n   66  \n   67  #         \"\"\"\n   68: #         # Th== == important to initiate a graph!!!!\n   69  #         #   calls the grandparent class\n   70  #         super(DeconvolutionProblem, self).__init__(data, **kwds)\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Formula/Formula.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from __future__ import absolute_import, division, print_function\n   20: from future.builtins import super\n   21  \n   22: from MassTodonPy.Formula.Parse import get_pattern, parse\n   23: from MassTodonPy.Formula.LinearDict import LinearDict\n   24  \n   25  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Formula/LinearDict.py:\n    1: from __future__ import absolute_import, division, print_function\n    2: from collections import MutableMapping\n    3  \n    4  class LinearDict(MutableMapping):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Formula/Parse.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: import re\n   19: from MassTodonPy.Data.elements import elements\n   20  \n   21  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/__init__.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: # from isotopeCalculator import IsotopeCalculator, aggregate, merge_runs\n   20: from .simple import isotope_calculator\n   21  \n   22  iso_calc = isotope_calculator()\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/envelope.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from future.builtins import super\n   20: import numpy as np\n   21: import matplotlib.pyplot as plt\n   22  \n   23: from MassTodonPy.Measure.Measure import Measure\n   24  \n   25  # Compared to Measure, the multiplication changes atoms, rather then masses.\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/isospec_wrapper.py:\n    1: from __future__ import absolute_import, division, print_function\n    2: from IsoSpecPy.IsoSpecPy import IsoSpec as isospec\n    3  \n    4: import numpy as np\n    5  \n    6  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/IsotopeCalculator.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: from __future__ import absolute_import, division, print_function\n   19: from IsoSpecPy import IsoSpecPy\n   20: from math import sqrt\n   21: import numpy as np\n   22  \n   23: from MassTodonPy.Data.Constants import infinity\n   24: from MassTodonPy.Data.get_isotopes import get_isotopic_masses_and_probabilities\n   25  # Formula needed for modularity of the class\n   26  #   need to parse a string formula\n   27: from MassTodonPy.Formula.Formula import Formula\n   28: from MassTodonPy.IsotopeCalculator.Misc import cdata2numpyarray  # TODO IsoSpec 2.0\n   29: from MassTodonPy.IsotopeCalculator.Misc import get_mean_and_variance\n   30: from MassTodonPy.IsotopeCalculator.Misc import check_charges\n   31: from MassTodonPy.Measure.Measure import Measure\n   32  \n   33  # convolute spectra with diffs spectra instead of Dirac deltas.\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/Misc.py:\n    1: import numpy as np\n    2: from six.moves import range\n    3  \n    4  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/simple.py:\n    4  # otherwise, we will not have an easy access to H mass.\n    5  \n    6: from __future__ import absolute_import, division, print_function\n    7  \n    8: from math import sqrt\n    9: import numpy as np\n   10  \n   11: from MassTodonPy.Data.Constants    import infinity\n   12: from MassTodonPy.Data.get_isotopes import get_isotopic_masses, get_isotopic_probabilities\n   13: from MassTodonPy.IsotopeCalculator.Misc import get_mean_and_variance\n   14: from MassTodonPy.IsotopeCalculator.Misc import cdata2numpyarray  # TODO IsoSpec 2.0\n   15: from MassTodonPy.IsotopeCalculator.envelope import envelope\n   16: from MassTodonPy.IsotopeCalculator.isospec_wrapper import isospec_numpy\n   17  \n   18  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/test_isotope_calculator.py:\n    1  \"\"\"Testing the isotope calculator.\"\"\"\n    2: from __future__ import absolute_import, division, print_function\n    3: import numpy as np\n    4: import unittest\n    5  \n    6: from MassTodonPy.IsotopeCalculator.IsotopeCalculator import IsotopeCalculator\n    7: from MassTodonPy.Misc.binomial import binomial\n    8  \n    9  class TestPeakPicker(unittest.TestCase):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/MatchMaker/__init__.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: # from czMatchmaker_basic import reaction_analist_basic\n   20: # from czMatchmaker_advanced import reaction_analist_advanced\n   21: # from czMatchmaker_intermediate import reaction_analist_intermediate\n   22: # from czMatchmaker_upper_intermediate import reaction_analist_upper_intermediate\n   23  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/MatchMaker/CzMatch.py:\n   16  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   17  \n   18: from __future__ import absolute_import, division, print_function\n   19: from collections import Counter, namedtuple\n   20: from future.builtins import super\n   21  \n   22: from MassTodonPy.MatchMaker.SimpleCzMatch import SimpleCzMatch\n   23: from MassTodonPy.Write.csv_tsv import write_rows\n   24  \n   25  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/MatchMaker/SimpleCzMatch.py:\n   16  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   17  \n   18: from __future__ import absolute_import, division, print_function\n   19: from collections import Counter, namedtuple\n   20: from cvxopt import  matrix, spmatrix, sparse, spdiag, solvers\n   21: import networkx as nx\n   22: from networkx import connected_component_subgraphs as connected_components\n   23  \n   24: from MassTodonPy.Data.Constants import eps, infinity\n   25: from MassTodonPy.Write.csv_tsv import write_rows\n   26  \n   27  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/MatchMaker/test_MatchMaker.py:\n    1: from __future__ import absolute_import, division, print_function\n    2: from collections import Counter, namedtuple\n    3: import unittest\n    4  \n    5: from MassTodonPy.Data.get_dataset import get_dataset\n    6: from MassTodonPy.MatchMaker.SimpleCzMatch import SimpleCzMatch\n    7: from MassTodonPy.MatchMaker.CzMatch import CzMatch\n    8: from MassTodonPy.Reporter.misc import Brick\n    9  \n   10  # TODO add test for the optimality of the fragment matching\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Measure/Measure.py:\n    1: from __future__ import absolute_import, division, print_function\n    2: from bisect import bisect_left\n    3: from bokeh.plotting import ColumnDataSource, figure, output_file, show\n    4: from bokeh.models import HoverTool\n    5: import csv\n    6: import numpy as np\n    7: from operator import itemgetter\n    8: from six.moves import range, zip\n    9  \n   10: from MassTodonPy.Data.Constants import infinity\n   11: from MassTodonPy.Misc.strings import repr_long_list\n   12: # from MassTodonPy.Misc.sorting import sort_by_first\n   13: from MassTodonPy.Parsers.Paths import parse_path\n   14: from MassTodonPy.Reporter.buffers import buffers\n   15  \n   16  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/__init__.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: # from cvxopt_wrapper import cvxopt_wrapper\n   20  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/cvxopt_wrapper.py:\n    1: import cvxopt\n    2: import imp\n    3: import os\n    4  \n    5  class cvxopt_wrapper(object):\n    .\n    8      Notes\n    9      -----\n   10:     This is important when running CVXOPT in any script that uses multiprocessing.\n   11      \"\"\"\n   12      def __enter__(self):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/ExtensionOfCommonDataStructures.py:\n    1: from collections import defaultdict\n    2  \n    3  # Zondos' way of doing it.\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/io.py:\n    1: import os\n    2: from MassTodonPy.Parsers.Paths import parse_path\n    3  \n    4  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/Iterators.py:\n    1: import itertools\n    2  \n    3  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/named_tuple_with_defaults.py:\n    1: from collections import namedtuple\n    2: from functools import partial\n    3: from itertools import chain\n    4  \n    5  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/sorting.py:\n    1: # from six.moves import zip\n    2  \n    3  # def sort_by_first(*lists, **sorted_args):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/denoiser.py:\n    1: from MassTodonPy.stats.descriptive import mad_denoising\n    2  \n    3  class Denoiser(object):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/nnls.py:\n    1: import matplotlib.pyplot as plt\n    2: import numpy as np\n    3: import scipy.optimize\n    4  \n    5: from MassTodonPy.models.model import Model\n    6  \n    7  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/polynomial.py:\n    1  \"\"\"Class that wraps up the polynomial fitting.\"\"\"\n    2  \n    3: import numpy as np\n    4  \n    5: from MassTodonPy.models.two_dimensional import Model2D\n    6: from MassTodonPy.stats.descriptive      import mad_denoising\n    7  \n    8  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/spline.py:\n    1: import matplotlib.pyplot as plt\n    2: import numpy             as np\n    3  \n    4: from scipy.interpolate   import LSQUnivariateSpline\n    5  \n    6: from MassTodonPy.arrays.operations      import dedup_sort\n    7: from MassTodonPy.models.two_dimensional import Model2D\n    8: from MassTodonPy.stats.descriptive      import mad_denoising\n    9  \n   10  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/two_dimensional.py:\n    1: import numpy as np\n    2: import matplotlib.pyplot as plt\n    3  \n    4: from MassTodonPy.models.model import Model\n    5  \n    6  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Molecule/Molecule.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: from __future__ import absolute_import, division, print_function\n   19  \n   20: from MassTodonPy.Data.Constants import infinity\n   21: from MassTodonPy.IsotopeCalculator.IsotopeCalculator import IsotopeCalculator\n   22  \n   23  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Molecule/simple.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: from __future__ import absolute_import, division, print_function\n   19  \n   20: from MassTodonPy.Data.Constants     import infinity\n   21: from MassTodonPy.plotters.spectrum  import plot_spectrum\n   22: from MassTodonPy.IsotopeCalculator  import iso_calc\n   23  \n   24  class Molecule(object):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Parsers/blocked_fragments.py:\n    1: import re\n    2  \n    3  def parse_blocked_fragments(blocked_fragments):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Parsers/parse_output.py:\n    1: from MassTodonPy.Parsers.Paths import parse_path\n    2  \n    3  def add_backslash(p):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Parsers/Paths.py:\n    1: import os\n    2  \n    3  def parse_path(path):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/__init__.py:\n    1: from MassTodonPy.Plot.bokeh_spectrum import bokeh_spectrum\n    2: from MassTodonPy.Plot.bokeh_aggregated_fragments import bokeh_aggregated_fragments\n    3: from MassTodonPy.Plot.bokeh_estimated_aggregated_fragments import bokeh_estimated_aggregated_fragments\n    4: from MassTodonPy.Plot.bokeh_aggregated_precursors import bokeh_aggregated_precursors\n    5  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/bokeh_aggregated_fragments.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from bokeh.embed import file_html\n   20: from bokeh.models import HoverTool, LabelSet\n   21: from bokeh.plotting import ColumnDataSource, figure, output_file, show as show_plot\n   22: from bokeh.resources import CDN\n   23  \n   24: from MassTodonPy.Misc.io import create_folder_if_needed\n   25: from MassTodonPy.Plot.Misc import aggregate_fragments\n   26  \n   27  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/bokeh_aggregated_precursors.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from bokeh.plotting import ColumnDataSource, figure, output_file, show as show_plot\n   20: from bokeh.models import HoverTool, Span, LabelSet\n   21: from bokeh.resources import CDN\n   22: from bokeh.embed import file_html\n   23  \n   24: from MassTodonPy.Misc.io import create_folder_if_needed\n   25  \n   26  def bokeh_aggregated_precursors(masstodon,\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/bokeh_estimated_aggregated_fragments.py:\n    1: from bokeh.embed import file_html\n    2: from bokeh.models import HoverTool, LabelSet\n    3: from bokeh.plotting import ColumnDataSource, figure, output_file, show as show_plot\n    4: from bokeh.resources import CDN\n    5  \n    6  \n    7: from MassTodonPy.Misc.io import create_folder_if_needed\n    8: from MassTodonPy.Plot.Misc import aggregate_fragments\n    9  \n   10  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/bokeh_spectrum.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from bokeh.plotting import ColumnDataSource, figure, output_file, show as show_plot\n   20: from bokeh.models import HoverTool, Span, LabelSet\n   21: from bokeh.resources import CDN\n   22: from bokeh.embed import file_html\n   23  \n   24: from MassTodonPy.Parsers.Paths import parse_path\n   25: from MassTodonPy.Misc.io import create_folder_if_needed\n   26  \n   27  def bokeh_spectrum(masstodon,\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/Misc.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from collections import defaultdict\n   20  \n   21  def aggregate_fragments(report, fasta, offset):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters/graphs.py:\n    1: import matplotlib.pyplot as plt\n    2: import networkx as nx\n    3  \n    4  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters/spectrum.py:\n    1: import matplotlib.pyplot as plt\n    2: import numpy as np\n    3: from scipy.stats import norm\n    4  \n    5: from MassTodonPy.stats.simple_normal_estimators import mean, sd\n    6  \n    7  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Precursor/Precursor.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: from __future__ import absolute_import, division, print_function\n   19: from six.moves import range\n   20  \n   21: from MassTodonPy.Data.get_amino_acids import get_amino_acids\n   22: from MassTodonPy.Formula.Formula      import Formula\n   23: from MassTodonPy.Molecule.Molecule    import molecule as old_molecule\n   24: from MassTodonPy.Molecule.simple      import molecule as new_molecule\n   25  \n   26  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Precursor/simple.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: from __future__ import absolute_import, division, print_function\n   19: from six.moves import range\n   20  \n   21: from MassTodonPy.Data.get_amino_acids import get_amino_acids\n   22: from MassTodonPy.Formula.Formula      import Formula\n   23: from MassTodonPy.IsotopeCalculator    import iso_calc\n   24: from MassTodonPy.Molecule.simple      import Molecule\n   25  \n   26  def flatten_modification(mod):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Precursor/test_Precursor.py:\n    1  \"\"\"Testing the output molecules.\"\"\"\n    2: from __future__ import absolute_import, division, print_function\n    3: import unittest\n    4  \n    5: from MassTodonPy.Data.get_dataset import get_dataset\n    6: from MassTodonPy.Precursor.Precursor import Precursor\n    7  \n    8  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/preprocessing/filters.py:\n    1: import intervaltree as iTree\n    2  \n    3  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/readers/from_npy.py:\n    1: import numpy as np\n    2: import os\n    3  \n    4  def spectrum_from_npy(data_path,\n    5                        mz_name        = 'mz.npy',\n    6                        intensity_name = 'in.npy'):\n    7:     \"\"\"Import spectrum from numpy files.\n    8  \n    9      It is assumed that two files exist:\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Reporter/buffers.py:\n    1: from six.moves import range, zip\n    2  \n    3: from MassTodonPy.Data.Constants import infinity\n    4  \n    5  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Reporter/misc.py:\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18  \n   19: from bokeh.palettes import viridis, Colorblind, Paired, Set3, Set1\n   20: from itertools import cycle\n   21  \n   22: from MassTodonPy.Data.Constants import infinity\n   23  \n   24  class Cluster(object):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Reporter/Reporter.py:\n   16  #   Version 3 along with MassTodon.  If not, see\n   17  #   <https://www.gnu.org/licenses/agpl-3.0.en.html>.\n   18: from collections import Counter, defaultdict\n   19: import csv\n   20: import json\n   21: import os\n   22  \n   23: from MassTodonPy.Misc.ExtensionOfCommonDataStructures import DefaultDict\n   24: from MassTodonPy.Parsers.Paths import parse_path\n   25: from MassTodonPy.Reporter.buffers import buffers\n   26: from MassTodonPy.Reporter.misc import *\n   27: from MassTodonPy.Write.csv_tsv import write_rows\n   28  \n   29  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/lightweight.py:\n    1: from bisect import bisect\n    2: import numpy as np\n    3  \n    4  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Read.py:\n    1: import numpy as np\n    2: from pyteomics import mzml  # >= 3.41\n    3: from pyteomics import mzxml  # >= 3.41\n    4  \n    5: from MassTodonPy.Data.Constants import infinity\n    6: from MassTodonPy.Data.Constants import eps\n    7: from MassTodonPy.Parsers.Paths import parse_path\n    8: from MassTodonPy.Measure.Measure import Measure\n    9  \n   10  # TODO add checks about the MS number\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/simple.py:\n    1: from   bisect            import bisect_left, bisect_right\n    2: from   collections       import  Counter\n    3: import matplotlib.pyplot as plt\n    4: from   math              import floor, log10\n    5: import numpy             as np\n    6  \n    7: from MassTodonPy.arrays.operations  import dedup_sort\n    8: from MassTodonPy.Data.Constants     import eps, infinity\n    9: from MassTodonPy.Measure.Measure    import Measure\n   10: from MassTodonPy.models.spline      import spline\n   11: from MassTodonPy.models.polynomial  import polynomial\n   12: from MassTodonPy.plotters.spectrum  import plot_spectrum\n   13  \n   14  \n   15: from MassTodonPy.Spectra.orbitrap.peak_clustering import bitonic_clustering,\\\n   16                                                           iter_cluster_ends,\\\n   17                                                           min_diff_clustering\n   18  \n   19: from MassTodonPy.stats.simple_normal_estimators   import mean,\\\n   20                                                           sd,\\\n   21                                                           skewness\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Spectrum.py:\n    1  \"\"\"Deal with experimental spectrum.\"\"\"\n    2: import csv\n    3: import numpy as np\n    4: import matplotlib.pyplot as plt\n    5  \n    6: from MassTodonPy.Data.Constants import eps, infinity\n    7: from MassTodonPy.Parsers.Paths import parse_path\n    8: from MassTodonPy.Spectra.Read import read_spectrum\n    9: from MassTodonPy.Measure.Measure import Measure\n   10: from MassTodonPy.Misc.unicode_compatibility import is_string\n   11  \n   12  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap/peak_clustering.py:\n    1: from    math    import  inf\n    2: import  numpy   as      np\n    3  \n    4: from MassTodonPy.plotters.spectrum import plot_spectrum\n    5  \n    6  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap/peak_groups.py:\n    2  # THIS WILL NOT BE USED AT ALL !!!\n    3  \n    4: import matplotlib.pyplot as plt\n    5: import numpy as np\n    6  \n    7: from MassTodonPy.arrays.operations                  import dedup_sort\n    8: from MassTodonPy.models.spline                      import spline\n    9: from MassTodonPy.plotters.spectrum                  import plot_spectrum\n   10: from MassTodonPy.Spectra.orbitrap.peak_clustering   import bitonic_clustering as bc\n   11: from MassTodonPy.Spectra.orbitrap.peak_clustering   import iter_cluster_ends\n   12  \n   13  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap/spectrum.py:\n    1: from bisect import bisect_left, bisect_right\n    2: from MassTodonPy.Measure.Measure    import Measure\n    3: from MassTodonPy.plotters.spectrum  import plot_spectrum\n    4  \n    5  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/stats/descriptive.py:\n    1: from   math  import sqrt\n    2: import numpy as np\n    3  \n    4  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/stats/simple_normal_estimators.py:\n    1  # TODO: the name of the file does not match the nature of these functions that are \n    2  # meaningful for any distribution.\n    3: import numpy as np\n    4: from math import sqrt, exp, log\n    5  \n    6: from MassTodonPy.Data.Constants import infinity\n    7  \n    8  def max_intensity_mean(mz_g, intensity_g):\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Write/csv_tsv.py:\n    1: import csv\n    2: import os\n    3  \n    4: from MassTodonPy.Parsers.Paths import parse_path\n    5  \n    6  \n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Write/export_outputs.py:\n   18  #\n   19  \n   20: # from intervaltree import Interval as interval, IntervalTree\n   21  #\n   22  #\n\n/Users/matteo/Projects/MassTodonPy/MassTodonPy/Write/write_to_csv.py:\n   18  \n   19  \n   20: # from pandas import DataFrame as DF\n   21: # import os\n   22  \n   23  \n\n856 matches across 175 files\n",
			"settings":
			{
				"buffer_size": 76443,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "MassTodonPy/Deconvolution/divide_ed_impera.py",
			"settings":
			{
				"buffer_size": 5287,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Golang Build/Go.sublime-build",
					""
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Run"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Test"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Install"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Cross-Compile (Interactive)"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Golang Build/Go.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"colo",
				"UI: Select Color Scheme"
			],
			[
				"",
				"About"
			],
			[
				"col",
				"Colorsublime: Install Theme"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"ui",
				"UI: Select Theme"
			],
			[
				"skin",
				"UI: Select Skin"
			],
			[
				"colorsub",
				"Colorsublime: Install Theme"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"tertm",
				"Terminal View: Open Bash Terminal"
			],
			[
				"sen",
				"SendCode: Choose Program"
			],
			[
				"send",
				"SendCode: Choose Program"
			],
			[
				"terminma",
				"Terminal View: Open Bash Terminal"
			],
			[
				"term",
				"Terminal View: Open Bash Terminal"
			],
			[
				"termin",
				"Terminal View: Open Bash Terminal"
			],
			[
				"termi",
				"Terminal View: Open Bash Terminal"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"terminal",
				"Terminal View: Open Bash Terminal"
			],
			[
				"teemin",
				"Terminal View: Open Bash Terminal"
			],
			[
				"ter",
				"Preferences: Terminal View: Settings"
			],
			[
				"send ",
				"SendCode: Choose Program"
			],
			[
				"ay",
				"ayu: Activate theme"
			],
			[
				"box",
				"Boxy Theme: Preferences"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"colorco",
				"Tweak Colorcode to current color scheme"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Color Scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"send code",
				"SendCode: Choose Program"
			],
			[
				"instla",
				"Package Control: Install Package"
			],
			[
				"colors",
				"UI: Select Color Scheme"
			],
			[
				"her",
				"Hermes: List Kernels"
			],
			[
				"herm",
				"Hermes: Connect Kernel"
			],
			[
				"them",
				"UI: Select Color Scheme"
			],
			[
				"antia",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 136.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/matteo/Projects/MassTodonPy",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra"
	],
	"file_history":
	[
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/misc.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/nnls.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/simple.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/model.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/simple.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters/spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/Misc.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/DeconvolutionProblem.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters/graphs.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/divide_ed_impera.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Deconvolution/Deconvolve.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/preprocessing/filters.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/preprocessing/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Molecule/simple.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/lightweight.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/graphs_and_screening.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/simple.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/polynomial.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/arrays/aggregations.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Precursor/simple.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Measure/Measure.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/aggregations.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Precursor/Precursor.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/envelope.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/preprocessing.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/stats/simple_normal_estimators.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/skewnesses.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/two_dimensional.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/graph_construction.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/clusters_from_arrays.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Formula/Formula.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Precursor/test_Precursor.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Molecule/Molecule.py",
		"/Users/matteo/Projects/MassTodonPy/bin/plot_mass_spectrum",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap/peak_groups.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap/peak_clustering.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/arrays/operations.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Spectrum/Measure.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/IsotopeCalculator.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/isospec_wrapper.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/playing_with_IsoSpec.py",
		"/Users/matteo/Projects/MassTodonPy/Development/IsotopeCalculator/isospec_wrapper.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/IsotopeDistribution.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/get_isotopes.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Formula/LinearDict.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/IsotopeCalculator/simplerIsotopeCalculator.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Formula/LinearDict.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap/spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap/orbitrap_peak_groups.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/orbitrap_spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/orbitrap_peak_groups.py",
		"/Users/matteo/Downloads/S180518_51_IA_workflow2.xml",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/futile_attemp_with_quantile_estimator.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/stats/descriptive.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/spline.py",
		"/Users/matteo/Poligon/R/StatisticalUncertainties/R/histogram_gauss_estimation.R",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/denoiser.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/stats/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/peak_clustering.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/models/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/readers/from_npy.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/matplotlib_colors.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Data/dummy.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/bitonic_clustering.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/from_npy.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Read.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/readers/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/plotters/__init__.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Spectra/Orbitrap.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Arrays/operations.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Arrays/__init__.py",
		"/Users/matteo/Desktop/Stat/more_of_density_and_quantile_regression.py",
		"/Users/matteo/Projects/rta/rta/development_script.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Orbitrap/iterator_class_method.py",
		"/Users/matteo/Projects/MassTodonPy/docs/Makefile",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Reporter/Reporter.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/MassTodon.py",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Plot/bokeh_spectrum.py",
		"/Users/matteo/Projects/MassTodonPy/TODO.md",
		"/Users/matteo/Projects/MassTodonPy/MassTodonPy/Misc/sorting.py",
		"/Users/matteo/Projects/MassTodonPy/Development/Spectrum/Spectrum.py",
		"/Users/matteo/Projects/rta/rta/preprocessing.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/filters.py",
		"/Users/matteo/Projects/rta/rta/models/GMM_OLS_combo.py",
		"/Users/matteo/Projects/rta/rta/x_validation_potential.py",
		"/Users/matteo/Projects/rta/rta/models/GMLSQSpline.py",
		"/Users/matteo/Projects/rta/rta/models/SQSpline.py",
		"/Users/matteo/Projects/rta/TODO.md",
		"/Users/matteo/Projects/rta/rta/models/devel/gmm_ols.py",
		"/Users/matteo/Projects/rta/rta/models/plot.py",
		"/Users/matteo/Projects/rta/rta/models/RapidGMLSQSpline.py",
		"/Users/matteo/Projects/rta/rta/alignment/run_alignment.py",
		"/Users/matteo/Projects/rta/rta/models/base_model.py",
		"/Users/matteo/Projects/rta/rta/array_operations/misc.py",
		"/Users/matteo/Projects/rta/rta/junk/patsy_bs.py",
		"/Users/matteo/Projects/rta/rta/models/spline_regression.py",
		"/Users/matteo/Projects/rta/rta/misc.py",
		"/Users/matteo/Projects/rta/rta/splines/denoising.py",
		"/Users/matteo/Projects/rta/rta/models/least_squares_splines.py",
		"/Users/matteo/Projects/rta/rta/patsy_operations/parsers.py",
		"/Users/matteo/Projects/rta/rta/models/test_statistics/rt_residuals_distro.py",
		"/Users/matteo/Projects/rta/rta/models/sklearn_regressors.py",
		"/Users/matteo/Projects/rta/rta/array_operations/__init__.py",
		"/Users/matteo/Projects/rta/rta/patsy_operations/__init__.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/__init__.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/grouped_k_folds.py",
		"/Users/matteo/Projects/rta/rta/xvalidation/pept_ids_representation_in_runs.py",
		"/Users/matteo/Projects/rta/rta/splines/denoising2.py",
		"/Users/matteo/Projects/rta/rta/read_in_data.py",
		"/Users/matteo/Projects/rta/rta/getting_to_grips_with_pandas.py",
		"/Users/matteo/Projects/rta/rta/profiling_denoise_and_align.py",
		"/Users/matteo/Projects/rta/rta/splines/denoising_procedure.py",
		"/Users/matteo/Projects/rta/rta/tweaking_preprocessing.py",
		"/Users/matteo/Downloads/multiprocessing_test.py",
		"/Users/matteo/Projects/rta/rta/scripts/xvalidationq.py",
		"/Users/matteo/Projects/rta/rta/models/quantile.py",
		"/Users/matteo/Projects/rta/rta/models/__init__.py",
		"/Users/matteo/Projects/rta/rta/models/huber.py",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/PXD001845/20141202_AMB_Bora_10x_40MeOH_1FA_OT_120k_10uscans_728_ETD_4ms_24precZ.raw",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/uniprot-organism%3A1241935.fasta",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/tabula-IH532330.csv",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/taxonomy-islandicus+LAL14%2F1.tab",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/raw2np.go",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/scans_cnt.go",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/data/20140909_F_EV_Sisl-prep2-SAX-fr6_r120_r240-ETD5SA20_1.mgf",
		"/Users/matteo/Projects/masstodon_response_to_reviewers/analysis/getting_spectra.py"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"import",
			"min_mz",
			"plot",
			"total_intensities",
			"mean_mz",
			"self.mean_mz",
			"interval",
			"self.min_mz",
			"get_bc",
			"peak_groups",
			"get_matrix_representation",
			"means",
			"l2",
			"fitted",
			"model",
			"get_matrix_representation",
			"draw_connected_component",
			"good_subspectra_cnt",
			"LS",
			"bc",
			"P",
			"iter",
			"cluster_ends",
			"[",
			"fit_mz",
			"round",
			"iso_cal",
			"mol",
			"prec",
			"iso_calc",
			"add_mass_divide_by_charge",
			":\n",
			"__aggregate",
			"round",
			"infinity",
			"if",
			"counts",
			"fit",
			"div_mod",
			"iso_calc",
			"molecule_ma",
			"molecule_maker",
			"new_",
			"molecule_maker",
			"print",
			"pritn",
			"print",
			"isotope_calculator",
			"Molecule",
			"iso",
			"add_mass_divide_by_charge",
			"Iso",
			"nditer",
			"nd_iter",
			"Spectrum",
			"mz_lefts_mz_diffs_in_clusters",
			"clustering",
			"mz_bitonic",
			"bitonic_clustering",
			" \n",
			".\n",
			"mz",
			"Cluster",
			"Cluste",
			"Cluster",
			"mz_bitonic",
			"trim",
			"()",
			"pass",
			")\n",
			"IsotopeDistribution",
			"Searching",
			"IsotopeDistribution",
			"Measure",
			"Formula",
			"    ...: ",
			"    ...:\n",
			"bisect_left",
			"§",
			"sqrt",
			"sys",
			"Projects",
			"())",
			"class",
			"self._mzdiff_model",
			"_mzdiff",
			"fit_mz_diffs",
			"print",
			"dedup",
			"iter_cluster_ends",
			"mz_and_mz_diffs",
			"()",
			"plot_spe",
			"np.",
			"bitonic_clustering",
			"cluste",
			"sorted",
			"mz_local",
			"            \n",
			"list",
			"spectrum",
			"min_intensity",
			"percent_top_peaks",
			"print",
			"spectrum",
			"kwds",
			"_devel",
			"print",
			"graph",
			" =",
			"sort",
			"sort_by_first",
			"sort",
			"_peakGroups_bricks_clusters",
			"self.M"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"bc",
			"x",
			"",
			"self.mz_diff_model",
			"bitonic_iterator",
			"deconvolution_graph"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "MassTodonPy/Deconvolution/simple.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2430,
						"regions":
						{
						},
						"selection":
						[
							[
								845,
								845
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "MassTodonPy/Spectra/simple.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13399,
						"regions":
						{
						},
						"selection":
						[
							[
								11993,
								11999
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3646.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "Development/Orbitrap/graphs_and_screening.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5865,
						"regions":
						{
						},
						"selection":
						[
							[
								286,
								286
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 76443,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										206,
										212
									],
									[
										519,
										525
									],
									[
										719,
										725
									],
									[
										862,
										868
									],
									[
										913,
										919
									],
									[
										977,
										983
									],
									[
										1040,
										1046
									],
									[
										1256,
										1262
									],
									[
										1399,
										1405
									],
									[
										1619,
										1625
									],
									[
										1677,
										1683
									],
									[
										1740,
										1746
									],
									[
										1815,
										1821
									],
									[
										1887,
										1893
									],
									[
										1966,
										1972
									],
									[
										2041,
										2047
									],
									[
										2101,
										2107
									],
									[
										2305,
										2311
									],
									[
										2345,
										2351
									],
									[
										2371,
										2377
									],
									[
										2390,
										2396
									],
									[
										2419,
										2425
									],
									[
										2440,
										2446
									],
									[
										2504,
										2510
									],
									[
										2579,
										2585
									],
									[
										2651,
										2657
									],
									[
										2730,
										2736
									],
									[
										2805,
										2811
									],
									[
										2865,
										2871
									],
									[
										2910,
										2916
									],
									[
										2977,
										2983
									],
									[
										3046,
										3052
									],
									[
										3197,
										3203
									],
									[
										3223,
										3229
									],
									[
										3282,
										3288
									],
									[
										3335,
										3341
									],
									[
										3396,
										3402
									],
									[
										3447,
										3453
									],
									[
										3498,
										3504
									],
									[
										3562,
										3568
									],
									[
										3625,
										3631
									],
									[
										3808,
										3814
									],
									[
										3843,
										3849
									],
									[
										3864,
										3870
									],
									[
										3923,
										3929
									],
									[
										4070,
										4076
									],
									[
										4089,
										4095
									],
									[
										4130,
										4136
									],
									[
										4275,
										4281
									],
									[
										4435,
										4441
									],
									[
										4478,
										4484
									],
									[
										4549,
										4555
									],
									[
										4608,
										4614
									],
									[
										4704,
										4710
									],
									[
										4776,
										4782
									],
									[
										4835,
										4841
									],
									[
										4923,
										4929
									],
									[
										5049,
										5055
									],
									[
										5180,
										5186
									],
									[
										5372,
										5378
									],
									[
										5436,
										5442
									],
									[
										5604,
										5610
									],
									[
										5664,
										5670
									],
									[
										5717,
										5723
									],
									[
										5772,
										5778
									],
									[
										5932,
										5938
									],
									[
										5983,
										5989
									],
									[
										6047,
										6053
									],
									[
										6110,
										6116
									],
									[
										6293,
										6299
									],
									[
										6353,
										6359
									],
									[
										6406,
										6412
									],
									[
										6461,
										6467
									],
									[
										6621,
										6627
									],
									[
										6672,
										6678
									],
									[
										6736,
										6742
									],
									[
										6799,
										6805
									],
									[
										7038,
										7044
									],
									[
										7098,
										7104
									],
									[
										7154,
										7160
									],
									[
										7317,
										7323
									],
									[
										7361,
										7367
									],
									[
										7431,
										7437
									],
									[
										7574,
										7580
									],
									[
										7642,
										7648
									],
									[
										7701,
										7707
									],
									[
										7758,
										7764
									],
									[
										7948,
										7954
									],
									[
										8095,
										8101
									],
									[
										8121,
										8127
									],
									[
										8157,
										8163
									],
									[
										8198,
										8204
									],
									[
										8237,
										8243
									],
									[
										8261,
										8267
									],
									[
										8392,
										8398
									],
									[
										8441,
										8447
									],
									[
										8605,
										8611
									],
									[
										8782,
										8788
									],
									[
										8830,
										8836
									],
									[
										8869,
										8875
									],
									[
										8910,
										8916
									],
									[
										8952,
										8958
									],
									[
										9110,
										9116
									],
									[
										9163,
										9169
									],
									[
										9224,
										9230
									],
									[
										9301,
										9307
									],
									[
										9454,
										9460
									],
									[
										9522,
										9528
									],
									[
										9575,
										9581
									],
									[
										9788,
										9794
									],
									[
										9910,
										9916
									],
									[
										10134,
										10140
									],
									[
										10282,
										10288
									],
									[
										10308,
										10314
									],
									[
										10521,
										10527
									],
									[
										10716,
										10722
									],
									[
										10858,
										10864
									],
									[
										11103,
										11109
									],
									[
										11155,
										11161
									],
									[
										11191,
										11197
									],
									[
										11422,
										11428
									],
									[
										11618,
										11624
									],
									[
										11640,
										11646
									],
									[
										11679,
										11685
									],
									[
										11750,
										11756
									],
									[
										11818,
										11824
									],
									[
										12007,
										12013
									],
									[
										12076,
										12082
									],
									[
										12138,
										12144
									],
									[
										12292,
										12298
									],
									[
										12347,
										12353
									],
									[
										12414,
										12420
									],
									[
										12504,
										12510
									],
									[
										12738,
										12744
									],
									[
										12935,
										12941
									],
									[
										13067,
										13073
									],
									[
										13102,
										13108
									],
									[
										13131,
										13137
									],
									[
										13210,
										13216
									],
									[
										13385,
										13391
									],
									[
										13411,
										13417
									],
									[
										13447,
										13453
									],
									[
										13496,
										13502
									],
									[
										13535,
										13541
									],
									[
										13559,
										13565
									],
									[
										13819,
										13825
									],
									[
										13882,
										13888
									],
									[
										13959,
										13965
									],
									[
										14157,
										14163
									],
									[
										14183,
										14189
									],
									[
										14243,
										14249
									],
									[
										14296,
										14302
									],
									[
										14351,
										14357
									],
									[
										14491,
										14497
									],
									[
										14554,
										14560
									],
									[
										14712,
										14718
									],
									[
										14738,
										14744
									],
									[
										14793,
										14799
									],
									[
										14882,
										14888
									],
									[
										14935,
										14941
									],
									[
										14990,
										14996
									],
									[
										15133,
										15139
									],
									[
										15231,
										15237
									],
									[
										15266,
										15272
									],
									[
										15406,
										15412
									],
									[
										15437,
										15443
									],
									[
										15636,
										15642
									],
									[
										15693,
										15699
									],
									[
										15736,
										15742
									],
									[
										15804,
										15810
									],
									[
										15872,
										15878
									],
									[
										15930,
										15936
									],
									[
										15985,
										15991
									],
									[
										16056,
										16062
									],
									[
										16144,
										16150
									],
									[
										16213,
										16219
									],
									[
										16365,
										16371
									],
									[
										16404,
										16410
									],
									[
										16475,
										16481
									],
									[
										16544,
										16550
									],
									[
										16606,
										16612
									],
									[
										16677,
										16683
									],
									[
										16873,
										16879
									],
									[
										16944,
										16950
									],
									[
										17013,
										17019
									],
									[
										17080,
										17086
									],
									[
										17251,
										17257
									],
									[
										17267,
										17273
									],
									[
										17324,
										17330
									],
									[
										17346,
										17352
									],
									[
										17411,
										17417
									],
									[
										17479,
										17485
									],
									[
										17639,
										17645
									],
									[
										17665,
										17671
									],
									[
										17725,
										17731
									],
									[
										17778,
										17784
									],
									[
										17833,
										17839
									],
									[
										18058,
										18064
									],
									[
										18236,
										18242
									],
									[
										18304,
										18310
									],
									[
										18357,
										18363
									],
									[
										18412,
										18418
									],
									[
										18617,
										18623
									],
									[
										18676,
										18682
									],
									[
										18712,
										18718
									],
									[
										18776,
										18782
									],
									[
										18834,
										18840
									],
									[
										19075,
										19081
									],
									[
										19163,
										19169
									],
									[
										19387,
										19393
									],
									[
										19450,
										19456
									],
									[
										19527,
										19533
									],
									[
										19712,
										19718
									],
									[
										19751,
										19757
									],
									[
										19793,
										19799
									],
									[
										19835,
										19841
									],
									[
										19900,
										19906
									],
									[
										20084,
										20090
									],
									[
										20123,
										20129
									],
									[
										20194,
										20200
									],
									[
										20263,
										20269
									],
									[
										20325,
										20331
									],
									[
										20396,
										20402
									],
									[
										20634,
										20640
									],
									[
										20681,
										20687
									],
									[
										20720,
										20726
									],
									[
										20760,
										20766
									],
									[
										20794,
										20800
									],
									[
										20832,
										20838
									],
									[
										21019,
										21025
									],
									[
										21042,
										21048
									],
									[
										21088,
										21094
									],
									[
										21163,
										21169
									],
									[
										21183,
										21189
									],
									[
										21232,
										21238
									],
									[
										21306,
										21312
									],
									[
										21405,
										21411
									],
									[
										21483,
										21489
									],
									[
										21553,
										21559
									],
									[
										21632,
										21638
									],
									[
										21711,
										21717
									],
									[
										21780,
										21786
									],
									[
										21849,
										21855
									],
									[
										21917,
										21923
									],
									[
										22095,
										22101
									],
									[
										22271,
										22277
									],
									[
										22533,
										22539
									],
									[
										22556,
										22562
									],
									[
										22602,
										22608
									],
									[
										22677,
										22683
									],
									[
										22697,
										22703
									],
									[
										22746,
										22752
									],
									[
										22820,
										22826
									],
									[
										22919,
										22925
									],
									[
										22997,
										23003
									],
									[
										23067,
										23073
									],
									[
										23146,
										23152
									],
									[
										23225,
										23231
									],
									[
										23294,
										23300
									],
									[
										23363,
										23369
									],
									[
										23550,
										23556
									],
									[
										23598,
										23604
									],
									[
										23644,
										23650
									],
									[
										23690,
										23696
									],
									[
										23765,
										23771
									],
									[
										23786,
										23792
									],
									[
										23860,
										23866
									],
									[
										23944,
										23950
									],
									[
										24024,
										24030
									],
									[
										24096,
										24102
									],
									[
										24177,
										24183
									],
									[
										24258,
										24264
									],
									[
										24329,
										24335
									],
									[
										24400,
										24406
									],
									[
										24470,
										24476
									],
									[
										24541,
										24547
									],
									[
										24612,
										24618
									],
									[
										24683,
										24689
									],
									[
										24756,
										24762
									],
									[
										24839,
										24845
									],
									[
										24946,
										24952
									],
									[
										25036,
										25042
									],
									[
										25119,
										25125
									],
									[
										25201,
										25207
									],
									[
										25501,
										25507
									],
									[
										25656,
										25662
									],
									[
										25793,
										25799
									],
									[
										25998,
										26004
									],
									[
										26053,
										26059
									],
									[
										26079,
										26085
									],
									[
										26111,
										26117
									],
									[
										26166,
										26172
									],
									[
										26200,
										26206
									],
									[
										26354,
										26360
									],
									[
										26438,
										26444
									],
									[
										26496,
										26502
									],
									[
										26639,
										26645
									],
									[
										26852,
										26858
									],
									[
										26905,
										26911
									],
									[
										26946,
										26952
									],
									[
										27126,
										27132
									],
									[
										27152,
										27158
									],
									[
										27247,
										27253
									],
									[
										27323,
										27329
									],
									[
										27403,
										27409
									],
									[
										27476,
										27482
									],
									[
										27556,
										27562
									],
									[
										27637,
										27643
									],
									[
										27710,
										27716
									],
									[
										27779,
										27785
									],
									[
										27850,
										27856
									],
									[
										27994,
										28000
									],
									[
										28135,
										28141
									],
									[
										28316,
										28322
									],
									[
										28339,
										28345
									],
									[
										28385,
										28391
									],
									[
										28460,
										28466
									],
									[
										28480,
										28486
									],
									[
										28529,
										28535
									],
									[
										28603,
										28609
									],
									[
										28648,
										28654
									],
									[
										28748,
										28754
									],
									[
										28826,
										28832
									],
									[
										28896,
										28902
									],
									[
										28975,
										28981
									],
									[
										29054,
										29060
									],
									[
										29123,
										29129
									],
									[
										29192,
										29198
									],
									[
										29260,
										29266
									],
									[
										29333,
										29339
									],
									[
										29453,
										29459
									],
									[
										29613,
										29619
									],
									[
										29652,
										29658
									],
									[
										29723,
										29729
									],
									[
										29792,
										29798
									],
									[
										29854,
										29860
									],
									[
										29925,
										29931
									],
									[
										29989,
										29995
									],
									[
										30058,
										30064
									],
									[
										30229,
										30235
									],
									[
										30310,
										30316
									],
									[
										30557,
										30563
									],
									[
										30617,
										30623
									],
									[
										30684,
										30690
									],
									[
										30753,
										30759
									],
									[
										30815,
										30821
									],
									[
										30877,
										30883
									],
									[
										30955,
										30961
									],
									[
										31196,
										31202
									],
									[
										31212,
										31218
									],
									[
										31269,
										31275
									],
									[
										31291,
										31297
									],
									[
										31356,
										31362
									],
									[
										31423,
										31429
									],
									[
										31510,
										31516
									],
									[
										31679,
										31685
									],
									[
										31755,
										31761
									],
									[
										31796,
										31802
									],
									[
										31845,
										31851
									],
									[
										31908,
										31914
									],
									[
										31977,
										31983
									],
									[
										32149,
										32155
									],
									[
										32225,
										32231
									],
									[
										32269,
										32275
									],
									[
										32338,
										32344
									],
									[
										32403,
										32409
									],
									[
										32473,
										32479
									],
									[
										32654,
										32660
									],
									[
										32688,
										32694
									],
									[
										32738,
										32744
									],
									[
										32789,
										32795
									],
									[
										32828,
										32834
									],
									[
										32992,
										32998
									],
									[
										33042,
										33048
									],
									[
										33106,
										33112
									],
									[
										33148,
										33154
									],
									[
										33339,
										33345
									],
									[
										33399,
										33405
									],
									[
										33452,
										33458
									],
									[
										33507,
										33513
									],
									[
										33693,
										33699
									],
									[
										33774,
										33780
									],
									[
										33866,
										33872
									],
									[
										34054,
										34060
									],
									[
										34154,
										34160
									],
									[
										34311,
										34317
									],
									[
										34387,
										34393
									],
									[
										34446,
										34452
									],
									[
										34520,
										34526
									],
									[
										34578,
										34584
									],
									[
										34754,
										34760
									],
									[
										34806,
										34812
									],
									[
										34846,
										34852
									],
									[
										34902,
										34908
									],
									[
										35117,
										35123
									],
									[
										35192,
										35198
									],
									[
										35249,
										35255
									],
									[
										35302,
										35308
									],
									[
										35365,
										35371
									],
									[
										35417,
										35423
									],
									[
										35479,
										35485
									],
									[
										35681,
										35687
									],
									[
										35862,
										35868
									],
									[
										35896,
										35902
									],
									[
										35946,
										35952
									],
									[
										35997,
										36003
									],
									[
										36036,
										36042
									],
									[
										36245,
										36251
									],
									[
										36269,
										36275
									],
									[
										36444,
										36450
									],
									[
										36478,
										36484
									],
									[
										36521,
										36527
									],
									[
										36568,
										36574
									],
									[
										36613,
										36619
									],
									[
										36675,
										36681
									],
									[
										36844,
										36850
									],
									[
										36920,
										36926
									],
									[
										37186,
										37192
									],
									[
										37262,
										37268
									],
									[
										37303,
										37309
									],
									[
										37338,
										37344
									],
									[
										37404,
										37410
									],
									[
										37461,
										37467
									],
									[
										37514,
										37520
									],
									[
										37573,
										37579
									],
									[
										37625,
										37631
									],
									[
										37687,
										37693
									],
									[
										37859,
										37865
									],
									[
										37935,
										37941
									],
									[
										37979,
										37985
									],
									[
										38027,
										38033
									],
									[
										38239,
										38245
									],
									[
										38303,
										38309
									],
									[
										38374,
										38380
									],
									[
										38590,
										38596
									],
									[
										38653,
										38659
									],
									[
										38822,
										38828
									],
									[
										38859,
										38865
									],
									[
										39098,
										39104
									],
									[
										39166,
										39172
									],
									[
										39235,
										39241
									],
									[
										39437,
										39443
									],
									[
										39505,
										39511
									],
									[
										39574,
										39580
									],
									[
										39630,
										39636
									],
									[
										39870,
										39876
									],
									[
										39921,
										39927
									],
									[
										40225,
										40231
									],
									[
										40276,
										40282
									],
									[
										40509,
										40515
									],
									[
										40564,
										40570
									],
									[
										40696,
										40702
									],
									[
										40805,
										40811
									],
									[
										41017,
										41023
									],
									[
										41083,
										41089
									],
									[
										41173,
										41179
									],
									[
										41397,
										41403
									],
									[
										41433,
										41439
									],
									[
										41491,
										41497
									],
									[
										41530,
										41536
									],
									[
										41601,
										41607
									],
									[
										41666,
										41672
									],
									[
										41753,
										41759
									],
									[
										41964,
										41970
									],
									[
										41980,
										41986
									],
									[
										42020,
										42026
									],
									[
										42107,
										42113
									],
									[
										42170,
										42176
									],
									[
										42327,
										42333
									],
									[
										42344,
										42350
									],
									[
										42387,
										42393
									],
									[
										42428,
										42434
									],
									[
										42498,
										42504
									],
									[
										42803,
										42809
									],
									[
										43003,
										43009
									],
									[
										43146,
										43152
									],
									[
										43197,
										43203
									],
									[
										43261,
										43267
									],
									[
										43324,
										43330
									],
									[
										43629,
										43635
									],
									[
										43897,
										43903
									],
									[
										44269,
										44275
									],
									[
										44285,
										44291
									],
									[
										44345,
										44351
									],
									[
										44387,
										44393
									],
									[
										44433,
										44439
									],
									[
										44452,
										44458
									],
									[
										44470,
										44476
									],
									[
										44539,
										44545
									],
									[
										44601,
										44607
									],
									[
										44685,
										44691
									],
									[
										44754,
										44760
									],
									[
										44820,
										44826
									],
									[
										44892,
										44898
									],
									[
										44965,
										44971
									],
									[
										45034,
										45040
									],
									[
										45107,
										45113
									],
									[
										45175,
										45181
									],
									[
										45242,
										45248
									],
									[
										45432,
										45438
									],
									[
										45448,
										45454
									],
									[
										45505,
										45511
									],
									[
										45540,
										45546
									],
									[
										45605,
										45611
									],
									[
										45658,
										45664
									],
									[
										45903,
										45909
									],
									[
										46080,
										46086
									],
									[
										46243,
										46249
									],
									[
										46269,
										46275
									],
									[
										46484,
										46490
									],
									[
										46723,
										46729
									],
									[
										46751,
										46757
									],
									[
										46782,
										46788
									],
									[
										46805,
										46811
									],
									[
										46865,
										46871
									],
									[
										46989,
										46995
									],
									[
										47059,
										47065
									],
									[
										47208,
										47214
									],
									[
										47227,
										47233
									],
									[
										47279,
										47285
									],
									[
										47335,
										47341
									],
									[
										47383,
										47389
									],
									[
										47434,
										47440
									],
									[
										47497,
										47503
									],
									[
										47570,
										47576
									],
									[
										47703,
										47709
									],
									[
										47734,
										47740
									],
									[
										47941,
										47947
									],
									[
										48179,
										48185
									],
									[
										48252,
										48258
									],
									[
										48490,
										48496
									],
									[
										48518,
										48524
									],
									[
										48578,
										48584
									],
									[
										48745,
										48751
									],
									[
										49005,
										49011
									],
									[
										49033,
										49039
									],
									[
										49052,
										49058
									],
									[
										49123,
										49129
									],
									[
										49181,
										49187
									],
									[
										49326,
										49332
									],
									[
										49510,
										49516
									],
									[
										49538,
										49544
									],
									[
										49574,
										49580
									],
									[
										49762,
										49768
									],
									[
										50025,
										50031
									],
									[
										50304,
										50310
									],
									[
										50602,
										50608
									],
									[
										50618,
										50624
									],
									[
										50675,
										50681
									],
									[
										50697,
										50703
									],
									[
										50730,
										50736
									],
									[
										50816,
										50822
									],
									[
										50836,
										50842
									],
									[
										50864,
										50870
									],
									[
										50883,
										50889
									],
									[
										50924,
										50930
									],
									[
										50986,
										50992
									],
									[
										51045,
										51051
									],
									[
										51117,
										51123
									],
									[
										51375,
										51381
									],
									[
										51391,
										51397
									],
									[
										51448,
										51454
									],
									[
										51487,
										51493
									],
									[
										51513,
										51519
									],
									[
										51534,
										51540
									],
									[
										51552,
										51558
									],
									[
										51602,
										51608
									],
									[
										51687,
										51693
									],
									[
										51762,
										51768
									],
									[
										51864,
										51870
									],
									[
										51939,
										51945
									],
									[
										52108,
										52114
									],
									[
										52182,
										52188
									],
									[
										52218,
										52224
									],
									[
										52388,
										52394
									],
									[
										52414,
										52420
									],
									[
										52503,
										52509
									],
									[
										52693,
										52699
									],
									[
										52709,
										52715
									],
									[
										52761,
										52767
									],
									[
										52841,
										52847
									],
									[
										53005,
										53011
									],
									[
										53031,
										53037
									],
									[
										53120,
										53126
									],
									[
										53323,
										53329
									],
									[
										53339,
										53345
									],
									[
										53396,
										53402
									],
									[
										53418,
										53424
									],
									[
										53447,
										53453
									],
									[
										53512,
										53518
									],
									[
										53580,
										53586
									],
									[
										53667,
										53673
									],
									[
										53892,
										53898
									],
									[
										53908,
										53914
									],
									[
										53962,
										53968
									],
									[
										54039,
										54045
									],
									[
										54074,
										54080
									],
									[
										54165,
										54171
									],
									[
										54271,
										54277
									],
									[
										54587,
										54593
									],
									[
										54603,
										54609
									],
									[
										54664,
										54670
									],
									[
										54723,
										54729
									],
									[
										54792,
										54798
									],
									[
										54920,
										54926
									],
									[
										54936,
										54942
									],
									[
										54993,
										54999
									],
									[
										55253,
										55259
									],
									[
										55301,
										55307
									],
									[
										55512,
										55518
									],
									[
										55580,
										55586
									],
									[
										55828,
										55834
									],
									[
										55848,
										55854
									],
									[
										55874,
										55880
									],
									[
										55954,
										55960
									],
									[
										56170,
										56176
									],
									[
										56186,
										56192
									],
									[
										56251,
										56257
									],
									[
										56292,
										56298
									],
									[
										56554,
										56560
									],
									[
										56570,
										56576
									],
									[
										56625,
										56631
									],
									[
										56659,
										56665
									],
									[
										56678,
										56684
									],
									[
										56744,
										56750
									],
									[
										56802,
										56808
									],
									[
										56981,
										56987
									],
									[
										57043,
										57049
									],
									[
										57134,
										57140
									],
									[
										57210,
										57216
									],
									[
										57271,
										57277
									],
									[
										57447,
										57453
									],
									[
										57488,
										57494
									],
									[
										57688,
										57694
									],
									[
										57704,
										57710
									],
									[
										57762,
										57768
									],
									[
										57781,
										57787
									],
									[
										57850,
										57856
									],
									[
										57908,
										57914
									],
									[
										58010,
										58016
									],
									[
										58086,
										58092
									],
									[
										58181,
										58187
									],
									[
										58255,
										58261
									],
									[
										58454,
										58460
									],
									[
										58470,
										58476
									],
									[
										58510,
										58516
									],
									[
										58536,
										58542
									],
									[
										58620,
										58626
									],
									[
										58683,
										58689
									],
									[
										58928,
										58934
									],
									[
										58994,
										59000
									],
									[
										59067,
										59073
									],
									[
										59150,
										59156
									],
									[
										59363,
										59369
									],
									[
										59379,
										59385
									],
									[
										59436,
										59442
									],
									[
										59491,
										59497
									],
									[
										59561,
										59567
									],
									[
										59620,
										59626
									],
									[
										59822,
										59828
									],
									[
										59838,
										59844
									],
									[
										59895,
										59901
									],
									[
										59941,
										59947
									],
									[
										59998,
										60004
									],
									[
										60041,
										60047
									],
									[
										60149,
										60155
									],
									[
										60208,
										60214
									],
									[
										60344,
										60350
									],
									[
										60360,
										60366
									],
									[
										60417,
										60423
									],
									[
										60451,
										60457
									],
									[
										60516,
										60522
									],
									[
										60584,
										60590
									],
									[
										60648,
										60654
									],
									[
										60701,
										60707
									],
									[
										60880,
										60886
									],
									[
										60896,
										60902
									],
									[
										60948,
										60954
									],
									[
										60994,
										61000
									],
									[
										61070,
										61076
									],
									[
										61094,
										61100
									],
									[
										61112,
										61118
									],
									[
										61152,
										61158
									],
									[
										61192,
										61198
									],
									[
										61257,
										61263
									],
									[
										61310,
										61316
									],
									[
										61371,
										61377
									],
									[
										61430,
										61436
									],
									[
										61489,
										61495
									],
									[
										61683,
										61689
									],
									[
										61792,
										61798
									],
									[
										61813,
										61819
									],
									[
										61831,
										61837
									],
									[
										61945,
										61951
									],
									[
										62176,
										62182
									],
									[
										62304,
										62310
									],
									[
										62352,
										62358
									],
									[
										62460,
										62466
									],
									[
										62600,
										62606
									],
									[
										62640,
										62646
									],
									[
										62677,
										62683
									],
									[
										62795,
										62801
									],
									[
										62975,
										62981
									],
									[
										63106,
										63112
									],
									[
										63145,
										63151
									],
									[
										63171,
										63177
									],
									[
										63238,
										63244
									],
									[
										63409,
										63415
									],
									[
										63483,
										63489
									],
									[
										63545,
										63551
									],
									[
										63655,
										63661
									],
									[
										63694,
										63700
									],
									[
										63765,
										63771
									],
									[
										63847,
										63853
									],
									[
										63912,
										63918
									],
									[
										63974,
										63980
									],
									[
										64093,
										64099
									],
									[
										64119,
										64125
									],
									[
										64196,
										64202
									],
									[
										64434,
										64440
									],
									[
										64450,
										64456
									],
									[
										64530,
										64536
									],
									[
										64606,
										64612
									],
									[
										64854,
										64860
									],
									[
										64870,
										64876
									],
									[
										64954,
										64960
									],
									[
										65013,
										65019
									],
									[
										65077,
										65083
									],
									[
										65217,
										65223
									],
									[
										65401,
										65407
									],
									[
										65529,
										65535
									],
									[
										65686,
										65692
									],
									[
										65764,
										65770
									],
									[
										65864,
										65870
									],
									[
										65965,
										65971
									],
									[
										66184,
										66190
									],
									[
										66226,
										66232
									],
									[
										66280,
										66286
									],
									[
										66372,
										66378
									],
									[
										66423,
										66429
									],
									[
										66488,
										66494
									],
									[
										66711,
										66717
									],
									[
										66800,
										66806
									],
									[
										66861,
										66867
									],
									[
										66896,
										66902
									],
									[
										66953,
										66959
									],
									[
										67160,
										67166
									],
									[
										67202,
										67208
									],
									[
										67256,
										67262
									],
									[
										67348,
										67354
									],
									[
										67407,
										67413
									],
									[
										67472,
										67478
									],
									[
										67682,
										67688
									],
									[
										67771,
										67777
									],
									[
										67832,
										67838
									],
									[
										67867,
										67873
									],
									[
										67930,
										67936
									],
									[
										67980,
										67986
									],
									[
										68210,
										68216
									],
									[
										68367,
										68373
									],
									[
										68406,
										68412
									],
									[
										68521,
										68527
									],
									[
										68560,
										68566
									],
									[
										68603,
										68609
									],
									[
										68678,
										68684
									],
									[
										68921,
										68927
									],
									[
										68937,
										68943
									],
									[
										68992,
										68998
									],
									[
										69058,
										69064
									],
									[
										69126,
										69132
									],
									[
										69186,
										69192
									],
									[
										69263,
										69269
									],
									[
										69519,
										69525
									],
									[
										69535,
										69541
									],
									[
										69590,
										69596
									],
									[
										69656,
										69662
									],
									[
										69724,
										69730
									],
									[
										69784,
										69790
									],
									[
										69845,
										69851
									],
									[
										70050,
										70056
									],
									[
										70066,
										70072
									],
									[
										70106,
										70112
									],
									[
										70171,
										70177
									],
									[
										70234,
										70240
									],
									[
										70348,
										70354
									],
									[
										70469,
										70475
									],
									[
										70495,
										70501
									],
									[
										70680,
										70686
									],
									[
										70860,
										70866
									],
									[
										70925,
										70931
									],
									[
										71118,
										71124
									],
									[
										71187,
										71193
									],
									[
										71247,
										71253
									],
									[
										71511,
										71517
									],
									[
										71546,
										71552
									],
									[
										71564,
										71570
									],
									[
										71583,
										71589
									],
									[
										71662,
										71668
									],
									[
										71719,
										71725
									],
									[
										71778,
										71784
									],
									[
										71831,
										71837
									],
									[
										71878,
										71884
									],
									[
										72003,
										72009
									],
									[
										72024,
										72030
									],
									[
										72131,
										72137
									],
									[
										72172,
										72178
									],
									[
										72217,
										72223
									],
									[
										72288,
										72294
									],
									[
										72343,
										72349
									],
									[
										72392,
										72398
									],
									[
										72450,
										72456
									],
									[
										72617,
										72623
									],
									[
										72682,
										72688
									],
									[
										72705,
										72711
									],
									[
										72769,
										72775
									],
									[
										72796,
										72802
									],
									[
										72878,
										72884
									],
									[
										72939,
										72945
									],
									[
										73003,
										73009
									],
									[
										73061,
										73067
									],
									[
										73118,
										73124
									],
									[
										73179,
										73185
									],
									[
										73273,
										73279
									],
									[
										73534,
										73540
									],
									[
										73812,
										73818
									],
									[
										73830,
										73836
									],
									[
										73856,
										73862
									],
									[
										73935,
										73941
									],
									[
										73994,
										74000
									],
									[
										74049,
										74055
									],
									[
										74110,
										74116
									],
									[
										74176,
										74182
									],
									[
										74317,
										74323
									],
									[
										74336,
										74342
									],
									[
										74413,
										74419
									],
									[
										74588,
										74594
									],
									[
										74627,
										74633
									],
									[
										74713,
										74719
									],
									[
										74790,
										74796
									],
									[
										74863,
										74869
									],
									[
										74943,
										74949
									],
									[
										75034,
										75040
									],
									[
										75172,
										75178
									],
									[
										75248,
										75254
									],
									[
										75306,
										75312
									],
									[
										75433,
										75439
									],
									[
										75452,
										75458
									],
									[
										75710,
										75716
									],
									[
										75746,
										75752
									],
									[
										75815,
										75821
									],
									[
										75962,
										75968
									],
									[
										75980,
										75986
									],
									[
										76036,
										76042
									],
									[
										76187,
										76193
									],
									[
										76355,
										76361
									],
									[
										76387,
										76393
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								5065,
								5065
							]
						],
						"settings":
						{
							"color_scheme": "Packages/VintageColor/Dracula-Insert.tmTheme",
							"detect_indentation": false,
							"highlight_line": true,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1592.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "MassTodonPy/Deconvolution/divide_ed_impera.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 5287,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 962.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 54.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.521390570995,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.golang_build":
	{
		"height": 225.0
	},
	"output.gotools_syntax_errors":
	{
		"height": 127.0
	},
	"pinned_build_system": "",
	"project": "masstodonpy.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"gra",
				"Development/Orbitrap/graphs_and_screening.py"
			],
			[
				"simple",
				"MassTodonPy/IsotopeCalculator/simple.py"
			],
			[
				"ligh",
				"MassTodonPy/Spectra/lightweight.py"
			],
			[
				"simpl",
				"MassTodonPy/Spectra/simple.py"
			],
			[
				"Pre",
				"MassTodonPy/Precursor/Precursor.py"
			],
			[
				"env",
				"MassTodonPy/IsotopeCalculator/envelope.py"
			],
			[
				"Prec",
				"MassTodonPy/Precursor/Precursor.py"
			],
			[
				"ske",
				"Development/Orbitrap/skewnesses.py"
			],
			[
				"norm",
				"MassTodonPy/stats/simple_normal_estimators.py"
			],
			[
				"evn",
				"MassTodonPy/IsotopeCalculator/envelope.py"
			],
			[
				"plo",
				"bin/plot_mass_spectrum"
			],
			[
				"two",
				"MassTodonPy/models/two_dimensional.py"
			],
			[
				"peak",
				"MassTodonPy/Spectra/orbitrap/peak_groups.py"
			],
			[
				"peakl",
				"MassTodonPy/Spectra/orbitrap/peak_clustering.py"
			],
			[
				"peak_",
				"MassTodonPy/Spectra/orbitrap/peak_clustering.py"
			],
			[
				"Meas",
				"MassTodonPy/Measure/Measure.py"
			],
			[
				"Measu",
				"Development/Spectrum/Measure.py"
			],
			[
				"Mea",
				"MassTodonPy/Measure/Measure.py"
			],
			[
				"Linera",
				"Development/Formula/LinearDict.py"
			],
			[
				"Formu",
				"MassTodonPy/Formula/Formula.py"
			],
			[
				"prep",
				"Development/Orbitrap/preprocessing.py"
			],
			[
				"poli",
				"MassTodonPy/models/polynomial.py"
			],
			[
				"spline",
				"MassTodonPy/models/spline.py"
			],
			[
				"splin",
				"MassTodonPy/models/spline.py"
			],
			[
				"descr",
				"MassTodonPy/stats/descriptive.py"
			],
			[
				"Model",
				"MassTodonPy/models/model.py"
			],
			[
				"stats",
				"MassTodonPy/stats/descriptive.py"
			],
			[
				"desc",
				"MassTodonPy/stats/descriptive.py"
			],
			[
				"model",
				"MassTodonPy/models/model.py"
			],
			[
				"mode",
				"MassTodonPy/models/model.py"
			],
			[
				"spect",
				"MassTodonPy/plotters/spectrum.py"
			],
			[
				"spec",
				"MassTodonPy/plotters/spectrum.py"
			],
			[
				"plot",
				"bin/plot_mass_spectrum"
			],
			[
				"dummp",
				"MassTodonPy/Data/dummy.py"
			],
			[
				"dumm",
				"MassTodonPy/Data/dummy.py"
			],
			[
				"biton",
				"MassTodonPy/Spectra/bitonic_clustering.py"
			],
			[
				"dec",
				"MassTodonPy/Deconvolution/DeconvolutionProblem.py"
			],
			[
				"Spect",
				"MassTodonPy/Spectra/Spectrum.py"
			],
			[
				"decon",
				"MassTodonPy/Deconvolution/Deconvolve.py"
			],
			[
				"TODO",
				"TODO.md"
			],
			[
				"MEa",
				"MassTodonPy/Measure/Measure.py"
			],
			[
				"Spe",
				"Development/Spectrum/Spectrum.py"
			],
			[
				"Mass",
				"MassTodonPy/MassTodon.py"
			],
			[
				"file",
				"rta/xvalidation/filters.py"
			],
			[
				"fil",
				"rta/xvalidation/filters.py"
			],
			[
				"pre",
				"rta/preprocessing.py"
			],
			[
				"preop",
				"rta/preprocessing.py"
			],
			[
				"SQL",
				"rta/models/SQSpline.py"
			],
			[
				"comb",
				"rta/models/GMM_OLS_combo.py"
			],
			[
				"junk",
				"rta/junk/patsy_bs.py"
			],
			[
				"bas",
				"rta/models/base_model.py"
			],
			[
				"GLM",
				"rta/models/GMM_OLS_combo.py"
			],
			[
				"misc",
				"rta/array_operations/misc.py"
			],
			[
				"array_oper",
				"rta/array_operations/misc.py"
			],
			[
				"base",
				"rta/models/base_model.py"
			],
			[
				"Spine",
				"rta/models/spline_regression.py"
			],
			[
				"pars",
				"rta/patsy_operations/parsers.py"
			],
			[
				"deni",
				"rta/splines/denoising.py"
			],
			[
				"deno",
				"rta/splines/denoising.py"
			],
			[
				"SKL",
				"rta/models/sklearn_regressors.py"
			],
			[
				"skle",
				"rta/models/sklearn_regressors.py"
			],
			[
				"poten",
				"rta/x_validation_potential.py"
			],
			[
				"pandas",
				"rta/getting_to_grips_with_pandas.py"
			],
			[
				"twa",
				"rta/tweaking_preprocessing.py"
			],
			[
				"denoi",
				"rta/splines/denoising.py"
			],
			[
				"quant",
				"rta/models/quantile.py"
			],
			[
				"hub",
				"rta/models/huber.py"
			],
			[
				"kd",
				"rta/kd_tree/kd_tree_nice.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 188.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
