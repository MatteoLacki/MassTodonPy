#!/usr/bin/env python
import argparse
import json
import os
from pprint import pprint

from MassTodonPy.MassTodon import MassTodon
from MassTodonPy.Parsers.blocked_fragments import parse_blocked_fragments
from MassTodonPy.Parsers.Paths import parse_path
from MassTodonPy.Plot.bokeh_aggregated_precursors import bokeh_aggregated_precursors
from MassTodonPy.Plot.bokeh_fragments_intensity import bokeh_fragments_intensity
from MassTodonPy.Plot.bokeh_spectrum import bokeh_spectrum

# Parsing call
parser = argparse.ArgumentParser()
parser.add_argument("json",
                    help="json with arguments")
parser.add_argument("--plot",
                    dest='plot',
                    action='store_const',
                    const=True,
                    default=False,
                    help="Make bokeh plots.")

parser.add_argument("--show",
                    dest='show',
                    action='store_const',
                    const=True,
                    default=False,
                    help="Show bokeh plots.")

parser.add_argument("--verbose",
                    dest='verbose',
                    action='store_const',
                    const=True,
                    default=False,
                    help="Print out the messages from MassTodon.")
args = parser.parse_args()

if args.verbose:
    os.system('cls' if os.name == 'nt' else 'clear')
    print('Welcome to MassTodon!\n')

with open('masstodon_input.json', 'r') as f:
    masstodon_args = json.load(f)

def add_backslash(p):
    if p[-1] != '/':
        p += '/'
    return p

# Renaming
if u'deconvolution_method' in masstodon_args:
    method = masstodon_args.pop('deconvolution_method')
    masstodon_args['method'] = method

# Parsing output file
output = add_backslash(masstodon_args.pop('output'))
if not os.path.exists(output):
    os.makedirs(output)

# Parsing modifications
modifications = masstodon_args.pop('modifications')
for k in modifications.keys():
    v = modifications.pop(k)
    modifications[int(k)] = v

masstodon_args['modifications'] = modifications


# Parsing blocked_fragments:
if 'blocked_fragments' in masstodon_args:
    masstodon_args['blocked_fragments'] = parse_blocked_fragments(masstodon_args['blocked_fragments'])

if args.verbose:
    print('Running MassTodon.')
    pprint(masstodon_args)
masstodon = MassTodon(**masstodon_args)

if args.verbose:
    print('Saving results.')
results_path = output + 'assigned_spectrum.csv'
masstodon.report.write(results_path)

if args.plot:
    if args.verbose:
        print('Plotting.')
        print(output)
    spec = bokeh_spectrum(masstodon=masstodon,
                          path=output + 'assigned_spectrum.html',
                          show_plot=args.show)
    prec = bokeh_aggregated_precursors(masstodon=masstodon,
                                       path=output + 'aggregated_precusors.html',
                                       show_plot=args.show)
    frag = bokeh_fragments_intensity(masstodon=masstodon,
                                     path=output + 'fragment_intensities.html',
                                     show_plot=args.show)

print('\nThank you for using MassTodonPy!\n')
