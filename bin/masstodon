#!/usr/bin/env python2
import argparse
from collections import defaultdict
import json
import os
from pprint import pprint
import re

from MassTodonPy.MassTodon import MassTodon
from MassTodonPy.Parsers.blocked_fragments import parse_blocked_fragments
from MassTodonPy.Parsers.Paths import parse_path
from MassTodonPy.Plot.bokeh_aggregated_precursors import bokeh_aggregated_precursors
from MassTodonPy.Plot.bokeh_fragments_intensity import bokeh_fragments_intensity
from MassTodonPy.Plot.bokeh_spectrum import bokeh_spectrum


# Parsing arguments
parser = argparse.ArgumentParser()
parser.add_argument("spectrum",
                    help="path to the spectrum file, with spectrum file extension: either '.txt', '.mzxml', or '.mzml', case insensitive.")
parser.add_argument("fasta",
                    help="The FASTA sequence of the protein to study.")
parser.add_argument("charge",
                    help="The initial charge of the precursor filtered out in MS1.")
parser.add_argument("mz_tol",
                    help="The tolerance in the m/z axis.")
parser.add_argument("-name",
                    help="The precursor's name.")
parser.add_argument("-modifications",
                    help="String with modifications of individual amino acids.\n\
                    Follows the scheme: '<amino acid number> <C_alpha|C_carbo|N> <element>=<integer difference> .. <element>=<integer difference> | ...'.\
                    For example: '11 C_carbo H=-1 N=1 O=-1|10 C_carbo H=-1 N=1 O=-10'")
# parser.add_argument("-fragmentation_type",
#                     help="Only 'cz' accepted for now. Planning other fragmentation schemes, including inner fragments.")
parser.add_argument("-blocked_fragments",
                    help="Fragments you don't want to include, e.g. 'z5', or 'c13z21c12c53z1': no spaces between diffferent names.")
parser.add_argument("-distance_charges",
                    help="The minimal distance between charges on the fasta sequence. Defaults to charges being 4 amino acids apart.")
parser.add_argument("-min_intensity",
                    help="Experimental peaks with lower height will be trimmed.")
parser.add_argument("-percent_top_peaks",
                    help="Percentage of the heighest peaks in the spectrum to be included.")
parser.add_argument("-deconvolution_method",
                    help="Matteo = MassTodon paper deconvolution. Ciacho_Wanda = experimental gaussian kernel deconvolution.")
parser.add_argument("-joint_probability",
                    help="The joint probability of the calculated isotopic distribution. Defaults to a decent '0.999'.")
parser.add_argument("-min_prob_per_molecule",
                    help="The minimal probability an envelope has to scoop to be included in the deconvolution graph.")
parser.add_argument("-_max_buffer_len",
                    help="The maximal length of the visual buffer between peaks, i.e. the big rectangle width.")
parser.add_argument("-_L1_flow",
                    help="L1 penalty for high flows of intensities.")
parser.add_argument("-_L2_flow",
                    help="L2 penalty (a.k.a. ridge regression like) for high flows of intensities.")
parser.add_argument("-_L1_intensity",
                    help="L1 penalty for high intensity estimates.")
parser.add_argument("-_L2_intensity",
                    help="L2 penalty (a.k.a. ridge regression like) for high intensities.")
parser.add_argument("-_max_times",
                    help="The maximal number of times to run CVXOPT.")
parser.add_argument("-_show_progress",
                    help="Show progress of the CVXOPT calculations.")
parser.add_argument("-_maxiters",
                    help="Maximum number of iterations for the CVXOPT algorithm.")
parser.add_argument("-sigma2",
                    help="Variance of the experimental peak's m/z ratio.")
parser.add_argument("-ni2",
                    help="Variance of the theoretic isotopologue's m/z ratio.")
parser.add_argument("-o",
                    "--output_path",
                    help="Path to the output.\
                          If not provided, spectrum is used path by default.")
parser.add_argument("--plot",
                    dest='plot',
                    action='store_const',
                    const=True,
                    default=False,
                    help="Print out the messages from MassTodon.")
parser.add_argument("--show",
                    dest='show',
                    action='store_const',
                    const=True,
                    default=False,
                    help="Show bokeh plots.")
parser.add_argument("-plot_width",
                    dest='width',
                    help="Width of the plot.")
parser.add_argument("-plot_height",
                    dest='height',
                    help="Height of the plot.")
parser.add_argument("--verbose",
                    dest='verbose',
                    action='store_const',
                    const=True,
                    default=False,
                    help="Print out the messages from MassTodon.")
args = parser.parse_args()

if args.verbose:
    os.system('cls' if os.name == 'nt' else 'clear')
    print('Welcome to MassTodon!\n')

masstodon_args = {}
for arg in args.__dict__:
    if arg not in ("output_path", "verbose", "plot_width", "plot_height") and \
       args.__dict__[arg] is not None:
        masstodon_args[arg] = args.__dict__[arg]

def add_backslash(p):
    if p[-1] != '/':
        p += '/'
    return p

# Parse modifications:
if 'modifications' in masstodon_args:
    # modifications = "11 C_carbo H=-1 N=1 O=-1|10 C_carbo H=-1 N=1 O=-10"
    def parse_modifications(modifications):
        output = defaultdict(dict)
        modifications = modifications.split('|')
        for mod in modifications:
            mod = mod.split()
            aa_no, aa_type = mod[0:2]
            diffs = {}
            for d in mod[2:]:
                element, diff = d.split('=')
                diffs[element] = int(diff)
            output[int(aa_no)][aa_type] = diffs
        return output

    masstodon_args['modifications'] = parse_modifications(masstodon_args['modifications'])

print(masstodon_args['modifications'])

# Parse blocked_fragments:
if 'blocked_fragments' in masstodon_args:
    masstodon_args['blocked_fragments'] = parse_blocked_fragments(masstodon_args['blocked_fragments'])

# establish output path
output_path, file_name, _ = parse_path(args.spectrum)
output_path = add_backslash(output_path)
if args.output_path:
    output_path = args.output_path
else:
    output_path += 'output'
output_path = add_backslash(output_path)
if not os.path.exists(output_path):
    os.makedirs(output_path)

if args.verbose:
    print('Running MassTodon.')

ok = False
i = 0
while not ok:
    try:
        masstodon = MassTodon(**masstodon_args)
        ok = True
    except ValueError as e:
        ok = False
        i += 1
        print('Failed {0} times already. Fuck CVXOPT.').format(i)

if args.verbose:
    print('Saving results.')
results_path = output_path + 'assigned_spectrum.csv'
masstodon.report.write(results_path)

masstodon.write(output_path)

if args.plot:
    if args.verbose:
        print('Plotting.')
    plot_path = output_path + 'assigned_spectrum.html'
    width = int(args.width) if args.width else None
    height = int(args.height) if args.height else None

    spec = bokeh_spectrum(masstodon=masstodon,
                          path=output_path + 'assigned_spectrum.html',
                          show_plot=args.show,
                          width=width,
                          height=height)
    prec = bokeh_aggregated_precursors(masstodon=masstodon,
                                       path=output_path + 'aggregated_precusors.html',
                                       show_plot=args.show)
    frag = bokeh_fragments_intensity(masstodon=masstodon,
                                     path=output_path + 'fragment_intensities.html',
                                     show_plot=args.show)
print('\nThank you for using MassTodonPy!\n')

# output_path = '/Users/matteo/Documents/MassTodon/MassTodonPy/Tests/data/output'
# spectrum_path = '/Users/matteo/Documents/MassTodon/MassTodonPy/Tests/data/FRL-010513-SUBP-WH000-WV300.txt'
